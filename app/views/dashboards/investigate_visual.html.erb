<%= javascript_include_tag 'd3.v2.min' %>

    <script type="text/javascript">
		
	var params = {
		scale: 1,
		viz_data: [],
		unitw: 1,
		h: 10,
		left_margin: 100,
		space: 1,
		export: function () {}
	};
		
	function pf(num) {
		//if (num === "") return 0;
		return parseFloat(num.replace(",", ""));
	}
	
	function convert_to_color(num) {
		switch(parseInt(num))
		{
		case -1: return "#111111";
		case 0: return "#888888";
		case 13: return "#5D8DA2";
		case 12: return "#82A3B5";
		case 11: return "#A8BDC9";
		case 10: return "#CFDAE2";
		case 23: return "#96C5CC";
		case 22: return "#AFD2D7";
		case 21: return "#C8E0E4";
		case 20: return "#E2EEF1";
		case 33: return "#F7B056";
		case 32: return "#F9C37D";
		case 31: return "#FCD5A4";
		case 30: return "#FDE9CE";
		default: return "#888888";
		}
	}
	
	function assign_colors(data_array) {
		data_array.splice(0,2);
		var color_size_array = [];
		var current_val = data_array[0];
		var current_size = 0;
		var i;
		var length = data_array.length;
		for (i=0; i < length; i++) {
			var check_val = data_array.shift();
			if (check_val != current_val) {
				color_size_array.push({color: convert_to_color(current_val), size: current_size, end_pos: i });
				current_val = check_val;
				current_size = 1;
			} else {
				current_size+=1;
			}
		}
		color_size_array.push({color: convert_to_color(current_val), size: current_size, end_pos: i });
		return color_size_array;
	}
	
	function matching_diffs(text) {
		params.viz_data = text;
		var max_length = 0;
		var data = d3.csv.parseRows(text);
		var formatted_data = data.map(function(elem) {
			max_length = elem.length > max_length ? elem.length : max_length;
			return { name:elem[0], id:elem[1], data: assign_colors(elem) }
		});
		
		var svg = d3.select("svg#matching_diffs")
			.attr("height", function() {return (params.h+params.space) * params.scale * (3+formatted_data.length)})
			.attr("width", (max_length * params.unitw + params.left_margin) * params.scale);
			//.attr("fill", "#444444");
		
		var rows = svg.selectAll("g")
			.data(formatted_data)
			.enter()
			.append("g")
			.attr("transform", function(d, i) {return "translate(0," +  (i * (params.h+params.space) * params.scale).toString() + ")"});
			//.attr("y", function(d, i) {return i * params.h * params.scale});

    // series labels
		rows.selectAll("text")
			.data(function(d) {return [d]})
			.enter()
			.append("a")
			.attr("xlink:href", function(d) {return "/series/" + d.id })
			.attr("target", "_blank")
			.append("text")
			.attr("class", "label-text")
			.attr("x", 0)
			.attr("y", (8+params.h) * params.scale)
			.text(function(d) { return d.name;});
				
		// data points
    rows.selectAll("rect")
			.data(function(d) {return d.data})
			.enter()
			.append("rect")
			.attr("width", function(d) {return (d.size * params.unitw * params.scale)})
			.attr("height", params.h * params.scale)
			.attr("x", function(d) {return ((d.end_pos-d.size) * params.unitw + params.left_margin) * params.scale})
			.attr("y", params.h * params.scale)
			.attr("fill", function(d) {return d.color});
	}		

	function new_data_points(csv) {
		
		var series_count = csv.length;
		var datapoint_count = d3.sum(csv, function(d) { return d.new_datapoints_added });
		var largest_count = 0;
		var letter_counts = d3.nest()
			.key(function(d) {return d.series_name.slice(0,1)})
			.rollup(function(leaves) { return [
													d3.sum(leaves, function(d) { return d.new_datapoints_added}), 
													leaves.length, 
													leaves.sort(function(a,b) {return d3.descending(parseInt(a.new_datapoints_added), parseInt(b.new_datapoints_added))}).map(function(d) {return d.series_name+" ("+ d.new_datapoints_added +")"}).join(", ") 
											]   })
			.map(csv);
		var all_letters_string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		var all_letters_counts = all_letters_string.split("").map(function(letter){
			if (letter_counts[letter] === undefined) return [letter, 0 , 0, 0 ];
			else {
				if (letter_counts[letter][0] > largest_count)
					largest_count = letter_counts[letter][0];	
				return [letter, letter_counts[letter][0], letter_counts[letter][1], letter_counts[letter][2] ]; 
			}
		});
		
		var dp_scale = d3.scale.linear().domain([0,largest_count]).range([0,200]);
		
		var svg = d3.select("svg#new_data_points")
			.attr("height", 250)
			.attr("width", 550);
		
		svg.append("text")
			.attr("x", 0)
			.attr("y", 10)
			.text(series_count + " Series Updated");

		svg.append("text")
			.attr("x", 0)
			.attr("y", 25)
			.text(datapoint_count + " New Datapoints");

    // data point bars
		svg.selectAll("rect.dp")
			.data(all_letters_counts)
			.enter()
			.append("rect")
			.attr("class", "dp")
			.attr("x", function(d,i) {  return i * 20 })
			.attr("y", function(d) {return 205 - dp_scale(d[1])})
			.attr("width", 10)
			.attr("height", function(d) {return dp_scale(d[1])})
			.attr("fill", "#D3E4D0")
			.append("svg:title")
			.text(function(d){return d[2] + ": " + d[3]} );

    // series bars
		svg.selectAll("rect.series")
			.data(all_letters_counts)
			.enter()
			.append("rect")
			.attr("class", "series")
			.attr("x", function(d,i) { return i * 20;  })
			.attr("y", function(d) {return 205 - dp_scale(d[2])})
			.attr("width", 10)
			.attr("height", function(d) {return dp_scale(d[2])})
			.attr("fill", "#119F49")
			.append("svg:title")
			.text(function(d){return d[2] + ":" + d[3]} );

    // letter_labels
		svg.selectAll("text.label")
			.data(all_letters_counts)
			.enter()
			.append("text")
			.attr("class", "label")
			.attr("x", function (d,i) {return i * 20})
			.attr("y", 220)
			.attr("fill", "#BBB")
			.text(function(d){return d[0]});
//		alert(all_letters_counts.toSource());
	}
	
	function download_results(csv) {
		var box = 7;
		var space = 3;
		var indent = 140;
		var nested_downloads = d3.nest()
			.key(function(d) {return d.handle.split("@")[1]})
			//.rollup(function(leaves) { return leaves.length})
			.map(csv);

		var svg = d3.select("svg#download_results")
			.attr("height", (d3.keys(nested_downloads).length + 1) * 15)
			.attr("width", 600);
		
		svg.selectAll("text")
			.data(d3.entries(nested_downloads))
			.enter()
			.append("text")
			.attr("x", 10)
			.attr("y", function(d,i) {return (i+1) * 15})
			.attr("fill", "#777")
			.text(function(d) { return d.key });
			
		var rows = svg.selectAll("g")
			.data(d3.entries(nested_downloads))
			.enter()
			.append("g")
			.attr("transform", function(d, i) {return "translate(" + indent + "," +  ((i+0.5) * 15).toString() + ")"});
	
		var downloads = rows.selectAll("rect") //this should maybe be text instead
			.data(function(d) { return d.value})
			.enter()
			.append("a")
			.attr("xlink:href", function(d) {return "/downloads/" + d.id })
			.attr("target", "_blank")
			.append("rect")
			.attr("height", box)
			.attr("width", box)
			.attr("y", 0)
			.attr("x", function(d,i) { return i * (box+space)})
			.attr("fill", function (d) {
				if (d.status != "200") return "red";
				if (d.changed == "true") return "#119F49";
				else return "#D3E4D0"; 
			})
			.append("svg:title")
			.text(function(d){return d.handle} );
			// .on("mouseover", function(d,i) {
			// 	mc = d3.mouse(svg[0][0]);
			// });
	}
	
	function packager_output(csv) {
		var num_per_row = 16;
		var width_of_box = 60;
		var space = 5;
		var height_of_box = 40;
		var text_space = 25;
		
		var nested_pos = d3.nest()
			.key(function(d) {return d.group; })
			.map(csv);
		for (key in d3.keys(nested_pos)) {
			csv.push({"changed":"false", "group":d3.keys(nested_pos)[key], "label":"A"});
		}
		csv.sort(function(a,b) {
			return d3.ascending(a.group+a.label,b.group+b.label);
		});
		
		var svg = d3.select("svg#update_spreadsheets")
			.attr("width", num_per_row * (width_of_box+space))
			.attr("height", (csv.length / num_per_row + 1) * (height_of_box+space));
			
		svg.selectAll("rects")
			.data(csv)
			.enter()
			.append("rect")
			.attr("class", function(d) {
				if (d.label == "A") return "group_label";
				if (d.changed == "true") return "changed";
				else return "not_changed";
			})
			.attr("height", height_of_box)
			.attr("width", width_of_box)
			.attr("x", function(d,i) { return (i % num_per_row) * (width_of_box+space) })
			.attr("y", function(d,i) { return Math.floor(i / num_per_row) * (height_of_box+space)});
		
		svg.selectAll("text")
			.data(csv)
			.enter()
			.append("g")
			.attr("class", function(d) {
				if (d.label == "A") return "group_label";
				if (d.changed == "true") return "changed";
				else return "not_changed";				
			})
			.append("text")
			.attr("x", function(d,i) { return (i % num_per_row) * (width_of_box+space) + 4})
			.attr("y", function(d,i) { return Math.floor(i / num_per_row) * (height_of_box+space) + text_space})
			//.attr("xml:space","preserve")
			.text(function(d){ 
				if (d.label == "A") return d.group;
				return d.label.replace("_upd","").split("_").join(" ");
			});
		
		// svg.selectAll("g.group_label")
		// 	.attr("transform","rotate(90, 50, 50)");
		//alert(csv.toSource());
	}
	
	//to get this to generate dynamically, remove the file from the public directory
	d3.text('/investigate_visual.csv', 'text/csv', matching_diffs);
	d3.csv('/dp_added.csv', new_data_points);
	d3.csv('/download_results.csv', download_results);
	d3.csv('/packager_output.csv', packager_output);
	</script>
	
	<style>
		h2 {font-weight:normal;}
		/*h2 { text-align:center; color:gray; font-family:verdana; font-weight:100; font-size:20px; padding-right:50px; }*/
		table#datacells td svg {margin: 0 auto;}
		svg#download_results text {font-size:9px;}
		svg#update_spreadsheets text {font-size:8px;}
		svg#update_spreadsheets rect.group_label {fill:white}
		svg#update_spreadsheets rect.changed {fill:#119F49}
		svg#update_spreadsheets rect.not_changed {fill:#D3E4D0}
		svg#update_spreadsheets g.changed text {font-weight:bold; fill:white}
		svg#update_spreadsheets g.not_changed text { fill:white}
		svg#update_spreadsheets g.group_label text {font-weight:bold; font-size:10px; fill:#CCC}
		.budget_svg {float:left; }
		.line { fill: none; stroke: steelblue; stroke-width: 1.5px; }
		.label-text {font-size:8px; font-family:Arial, sans-serif; color: #888888;}
		body {width:1200px;}
	</style>
	
	
	<div id="all_charts">
		<table>
			<tr>
				<td>
		<h2>New Data Points and Updated Series</h2>
		<svg id="new_data_points"></svg>
 		</td>
		<td>
			<h2>Downloads / Raw Data</h2>
			<svg id="download_results"></svg>
      <% if current_user.admin_user? %>
        <p><button id="export_tsd">Generate TSD Export</button><span id="message_area"></span></p>
        <p>
          <%= button_to('Restart REST API', { controller: :dashboards, action: :restart_restapi },
                          form_class: 'rest-restart-button', remote: true) %>
               <i id="rest-restart-indicator" class="fas fa-check" aria-hidden="true" style="display:none;"></i>
          <%= button_to('Restart DVW API', { controller: :dashboards, action: :restart_dvwapi },
                        form_class: 'dvw-restart-button', remote: true) %>
               <i id="dvw-restart-indicator" class="fas fa-check" aria-hidden="true" style="display:none;"></i>
        </p>
        <p>
        <%= button_to('Update public data points', { controller: :dashboards, action: :update_public_dp },
                         { form_class: 'button-with-indicator', remote: true }) %>
               <i id="pdp-indicator" class="fas fa-spinner fa-spin" aria-hidden="true" style="display:none;"></i>
        <%= button_to('Sync files from NAS', { controller: :dashboards, action: :force_sync_files },
                        { form_class: 'nas-sync-button', remote: true }) %>
          <i id="nas-sync-indicator" class="fas fa-spinner fa-spin" aria-hidden="true" style="display:none;"></i>
        </p>
      <% end %>
		</td>
		</tr>
      <tr><td><h2>Reload Jobs</h2></td></tr>
      <table class="list_table">
        <thead>
        <tr>
          <th>Id</th>
          <th>User</th>
          <th>Status</th>
          <th>Created</th>
          <th>Finished</th>
          <th>Count</th>
          <th>Series...</th>
          <th colspan="100%">Error</th>
        </tr>
        </thead>
        <tbody>
        <% @all_reload_jobs.each do |job| %>
          <tr>
            <td><%= job.id %></td>
            <td><%= job.user.email.sub(/@.*/, '') %></td>
            <td style="text-align:center;">
                <% if job.status.nil? %>
                    waiting<%= link_to '<i class="fas fa-ban redban" title="cancel"></i>'.html_safe, { action: :destroy_reload_job, id: job } %>
                <% else %>
                    <%= job.status %>
                <% end %>
           </td>
            <td><%= job.created_at.strftime('%m/%d/%y %H:%M') %></td>
            <td style="text-align:center;"><%= job.finished_at.strftime('%H:%M') rescue '-' %></td>
            <td style="text-align:center;"><%= job.series.count %></td>
            <td><%= job.series[0..2].map(&:name).join(', ') + (' ...' if job.series.count > 3).to_s %></td>
            <td><%= job.error[0..80] rescue nil %></td>
          </tr>
        <% end %>
        </tbody>
      </table>
      <tr><td><h2>Current load errors</h2></td></tr>
      <table>
        <th>Count</th><th>Error message</th>
        <% @err_summary.each do |entry| %>
          <tr><td><%= entry[2] %></td><td><%= link_to entry[0], controller: :series, action: :show, id: entry[1] %></td></tr>
        <% end %>
      </table>
      <tr>
		<td colspan=2>
			<h2>Update Spreadsheets</h2>
			<svg id="update_spreadsheets"></svg>
		</td>
		</tr>
		</table>

		<h2>Series Mismatches with Aremos</h2>
    <% if Rails.env == 'development' %>
        This is not displayed in Development environment
    <% else %>
        <svg id="matching_diffs"></svg>
    <% end %>
	</div>

<script>
  d3.select('#export_tsd').on('click', function() {
    d3.json('/export_tsd', function(data) {
      d3.select('#message_area')
          .text(data.message)
          .style('background-color', '#A4CCB3')
       //   .style('padding', '20px')
          .style('display', 'inline-block')
          .style('font-weight', 700)
          .style('color', '#397A26');
    })
  })
</script>

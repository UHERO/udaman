<link rel="stylesheet" href="http://code.jquery.com/ui/1.9.0/themes/base/jquery-ui.css" />
<script src="/javascripts/ui/jquery-ui.js"></script>
<script type="text/javascript" src="/javascripts/d3.v2.js"></script>

<style>
	
	#spark_adjuster {width: 300px; float:left; margin:0 20px 0 10px; position:relative; height:50px;}
	#table_adjuster {width:500px; float:left; margin:0 20px 0 20px; position:relative; height:50px;}
	td.calc,
	td.inner {font-size:10px; line-height:13px}
	tr#header_row th {font-size:10px; font-weight:bold; border-bottom:1px solid gray}
	span.level {font-size:11px}
	span.yoy { color: gray}
	span.yoy_diff { color :gray}

	div.slider {position:absolute; width:100%; left:0px; top: 0px;}
	div.slider_label,
	table.date_range {top:15px;}
	div.slider_label {width:190px; position:absolute; left:0px;}
	table.date_range {color:gray;  font-weight:normal; width:100px; position:absolute; right:0px;}
	table.date_range td {font-size:11px; line-height:13px; border:0;}
	div.range_links {font-size:11px; left:0px; top: 30px; position:absolute; width:240px;}

	span#start_date, span#end_date {color: black}
	td span.s_desc {font-size:9px; line-height:12px; color:gray;}
	td div {line-height:12px}
	table#data_table {clear:both; table-layout:fixed; width:0px;}
	table#data_table th.header_col { width: 175px;}
	table#data_table th.date_col {width: 50px;}
	table#data_table th.spark_col {width: 120px;}
	table#data_table th.range_col {width: 100px;}
	table#data_table th {width:75px}
	
	table#data_table th.calc {line-height:13px;}
	div#frequency_selector {padding-bottom:5px;}
</style>
<div id="frequency_selector">
	Try a Different Frequency: <%= link_to "A", { :freq => "A" } %> | <%= link_to "Q", { :freq => "Q" } %> | <%= link_to "M", { :freq => "M" } %> | <%= link_to "Edit this List", :action => "edit"%>
</div>
<div id="spark_adjuster">
	<div id="spark_slider" class="slider"></div>
	<div class="slider_label">Sparkline Date Range</div>
	<table id="spark_date_range" class="date_range"></table>
	<div class="range_links">
		<a href="#" onclick="match('table')">Match Table</a>
		<a href="#" onclick="set_spark_periods_back(5)">Last 5</a>
		<a href="#" onclick="set_spark_periods_back(12)">12</a>
		<a href="#" onclick="set_spark_periods_back(24)">24</a>
		<a href="#" onclick="set_spark_periods_back(60)">60</a>
		<a href="#" onclick="set_spark_periods_back(120)">120</a>

	</div>
</div>

<div id="table_adjuster">
	<div id="table_slider" class="slider"></div>
	<div class="slider_label">Table Date Range</div>
	<table id="table_date_range" class="date_range"></table>
	<div class="range_links">
		<a href="#" onclick="match('spark')">Match Sparkline</a>
		<a href="#" onclick="set_table_periods_back(5)">Last 5</a>
		<a href="#" onclick="set_table_periods_back(12)">12</a>
		<a href="#" onclick="set_table_periods_back(24)">24</a>
		<a href="#" onclick="set_table_periods_back(60)">60</a>
		<a href="#" onclick="set_table_periods_back(120)">120</a>
		
		
	</div>
</div>



<table id="data_table">
</table>
<script>

// features to add
// DONE - separate sliders for table and sparkline
// DONE - button to match sparkline to table and vice versa
// DONE - link to analyze
// DONE - new default for table
// DONE - Selected Value (selected value, date, YTD)
// DONE - min column (min value, min date, min to selected level)
// DONE - max column (max value, max date, max to selected level)
// DONE - range column(min-max diff, min to current/min to max, current to max / min to max)
// DONE - selected point percent change from (first point, min, max)
// 
// dot to show current/selected
// responsiveness to point
// switch chart to growth rates / YTD rates options (bars)

	function perc(num) {
		if (num === null) return ""
		return num.toFixed(2) + "%";
	}
	function f(num) {
		if (num === null) return ""
		return num.toFixed(2);
	}
	function freq(series_name){
		return series_name.split(".")[1];
	}
	function date_h(date,freq)
	{
		var parts = date.split("-")
		if (freq.toUpperCase() === "M") {
			return parts[0]+"m"+parts[1];
		} else if (freq.toUpperCase() === "Q") {
			var q = Math.floor(parseInt(parts[1])/3)+1;
			return parts[0]+"q"+q;
		} else if (freq.toUpperCase() === "A") {
			return parts[0];
		} else {
			return date;
		}
		
	}
	
	function pf(num) {
		if (num === "") return null;
		parsed_float = parseFloat(num);
		return parsed_float;
	}
	
	var all_data = <%= @freq.nil? ? @data_list.get_all_series_data_with_changes.to_json.html_safe : @data_list.get_all_series_data_with_changes(@freq).to_json.html_safe %>
	
	var frequency = freq(d3.keys(all_data)[0]);
	var all_dates = {}
	d3.values(all_data).forEach(function(elem) { 
		d3.keys(elem.data).forEach(function(date) {
			all_dates[date]=1
		})
	});
	
	dates = d3.keys(all_dates).sort(d3.ascending);

	// --------- Fill get all arrays to have matching dates --------
	filler_data_array = {}
	d3.keys(all_dates).forEach(function(date) {filler_data_array[date] = { value:null, yoy:null, yoy_diff:null, ytd:null, ytd_diff:null } });

	d3.entries(all_data).forEach(function (elem) {
		all_data[elem.key].data = $.extend({}, filler_data_array, elem.value.data);
	})
	// -------------------------------------------------------------
	
	var test_area = d3.select("#test_area");
	var data_table = d3.select("#data_table");
	var header = data_table.append("tr")	
		.attr("id", "header_row")
	
	function head_html(line1, line2, line3) {
		line1 = line1;
		line2 = line2 != "" ? ("<br/>"+line2) : "";
		line3 = line3 != "" ? ("<br/>"+line3) : "";
		return line1+line2+line3
	}
	header.append("th").text("").attr("class", "header_col");
	header.append("th").text("").attr("class", "spark_col");
	header.append("th").html(head_html("Last Obs","date", "YTD %chg")).attr("class", "calc sel_col");
	header.append("th").html(head_html("Min Obs","date", "Last - Min")).attr("class", "calc min_col");
	header.append("th").html(head_html("Max Obs","date", "Last - Max")).attr("class", "calc max_col");
	header.append("th").html(head_html("%chg fr first","%chg fr min", "%chg fr max")).attr("class", "calc chg_col");
	header.append("th").html(head_html("Max - Min","Last-Min/Max-Min", "Last-Max/Max-Min")).attr("class", "calc range_col");
		
	header
		.selectAll("th.date_col")
		.data(dates)
		.enter()
		.append("th")
		.attr("class", "date_col")
		.html(function(d) {
			return date_h(d,frequency);
		});
		
	var series_rows = data_table.selectAll("tr.series")
		.data(d3.entries(all_data));
		
	var spark_height = 30;
	var spark_width = 120;
	
	series_rows.enter()
		.append("tr")
		.attr("class", "series");
	
	series_rows
		.append("td")
		.attr("class", "header_col")
		.html(function(d) {
			return "<div><a href='/series/analyze/"+d.value.id+"' target='_blank'>" + d.key + "</a></div>"
				+ "<div><span class='s_desc'>" + d.value.desc + "</span></div>"
		})
		
	series_rows
		.append("td")
		.append("svg")
		.attr("id", function(d) {return "row_"+d.key})
		.attr("class", "spark_box")
		.attr("height", spark_height)
		.attr("width", spark_width);
	
	var x = d3.scale.linear()
		.range([0,spark_width])
		.domain([new Date(dates[0]), new Date(dates[dates.length-1]) ])
		
	var y = d3.scale.linear()
		.range([spark_height,0]);

	var spark_line = d3.svg.line()
		.x(function(d) { return x(new Date(d.key))})
		.y(function(d) { return y(d.value.value)})
		
	var spark_paths = d3.selectAll("svg.spark_box")
		.append("path")
		.attr("class", "spark")
		.data(d3.values(all_data));
				
	spark_paths
		.attr("d", function(d) {
			sorted_data = d3.entries(d.data).sort( function(a,b) {
				return d3.ascending(a.key, b.key)
			}).filter(function(elem) {return elem.value.value != null});
			y.domain(d3.extent(sorted_data, function(a) {return a.value.value}));
			return spark_line(sorted_data)
		})
		.attr("stroke", "red")
		.attr("fill", "none");
		
	
	function sp_calcs(d, start_date,end_date) {

		var data = d3.entries(d.value.data).filter(function(elem) {
			return (elem.value.value != null) && (elem.key >= start_date && elem.key <= end_date); 
		}).sort(function(a,b) { return d3.ascending(a.key, b.key)});
		
		if (data.length === 0) //for undefined series
			return [{col_name:"sel",   value:"", yoy:"", yoy_diff:""},
					{col_name:"min",   value:"", yoy:"", yoy_diff:""},
					{col_name:"max",   value:"", yoy:"", yoy_diff:""},
					{col_name:"chg",   value:"", yoy:"", yoy_diff:""},
					{col_name:"range", value:"", yoy:"", yoy_diff:""}];
					
		var sp = data[data.length-1]; //selected_point = last point for now
		var sp_val = sp.value.value; 

		var fp = data[0]; //first point
		var fp_val = fp.value.value
		
		var sorted_data = data.sort(function(a,b) {
			return d3.ascending(a.value.value, b.value.value);
		});
		
		var min_elem = sorted_data[0];
		var min = min_elem.value.value;
		var min_date = min_elem.key;
		var min_diff = sp_val - min;
		
		var max_elem = sorted_data[sorted_data.length-1];
		var max = max_elem.value.value;
		var max_date = max_elem.key;
		var max_diff = sp_val-max;
		
		return [{col_name:"sel", value:f(sp_val), yoy:date_h(sp.key,frequency), yoy_diff:perc(sp.value.ytd)},
				{col_name:"min", value:f(min), yoy:date_h(min_date,frequency), yoy_diff:f(min_diff)},
				{col_name:"max", value:f(max), yoy:date_h(max_date,frequency), yoy_diff:f(max_diff)},
				{col_name:"chg", value:perc((sp_val-fp_val)/fp_val*100), yoy:perc((sp_val-min)/min*100), yoy_diff:perc((sp_val-max)/max*100)},
				{col_name:"range", value:f(max-min), yoy:perc((sp_val-min)/(max-min)*100), yoy_diff:perc((sp_val-max)/(max-min)*100)}];
	}
	
	function calc_html(d) {
		return "<span class='level'>" + d.value + "</span><br />" +
				"<span class='yoy'>" + d.yoy + "</span><br />" +
		 		"<span class='yoy_diff'>" + d.yoy_diff + "</span>";
	}
	
	//var sp_calcs = selected_point_calculations(dates[0], dates[dates.length-1]);

	var calc_cells = series_rows.selectAll("td.calc")
		.data(function(d) {return sp_calcs(d,dates[0], dates[dates.length-1])})
		.enter()
		.append("td")
		.attr("class", "calc")
		.attr("id",function(d) {return "col_"+d.col_name})
		.html(calc_html);


	// ----------------------------------------------
	data_cells = series_rows.selectAll("td.inner")
		.data(function(d) {return d3.entries(d.value.data).sort(function(a,b) 
			{return d3.ascending(a.key, b.key)}
		)})
		.enter()
		.append("td")
		.attr("class", "inner")
		.html(cell_html);
				
	function cell_html(d){
		return ""
		+ "<span class='level'>" + f(d.value.value) + "</span><br/>"
		+ "<span class='yoy'>" + perc(d.value.yoy) + "</span><br/>"
		+ "<span class='yoy_diff'>" + f(d.value.yoy_diff) + "</span><br/>";
		//+ "<span class='ytd'>" + f(d.value.ytd) + "</span><br/>"
	}
	
	function date_header(start_date, end_date) {
		return ""
		+ "<tr><td>Start</td><td><span id='start_date'>" + date_h(start_date,frequency) + "</span></tr>"
		+ "<tr><td>End</td><td><span id='end_date'>" + date_h(end_date,frequency) + "</span></tr>"
	}
	
	function trim_table(start_date,end_date) {
		
		// Adjust headers
		filtered_dates = dates.filter(function(elem) {
			return (elem >= start_date && elem <= end_date); 
		});

		header_cells = d3.select("tr#header_row").selectAll("th.date_col")
			.data(filtered_dates)
			
		header_cells.enter().append("th").attr("class", "date_col");
		header_cells.html(function(d) {return date_h(d,frequency)});
		header_cells.exit().remove();
		// -------------------
		
		// Adjust data cells
		data_cells = series_rows.selectAll("td.inner")
			.data(function(d) {
				filtered_data = d3.entries(d.value.data).filter(function(elem) { 
					return (elem.key >= start_date && elem.key <= end_date); 
				});
				return filtered_data.sort(function(a,b) {
						return d3.ascending(a.key, b.key)
					});
			});
				
		data_cells
			.enter()
			.append("td")
			.attr("class", "inner");
		
		data_cells.html(cell_html);

		data_cells
			.exit()
			.remove();
	}
	
	function trim_spark(start_date,end_date) {
		filtered_dates = dates.filter(function(elem) {
			return (elem >= start_date && elem <= end_date); 
		});
		
		// ------------------------
		
		// Adjust sparklines
		x.domain([new Date(filtered_dates[0]), new Date(filtered_dates[filtered_dates.length - 1])]);
		d3.selectAll("path.spark")
			.attr("d", function(d) {
				filtered_data = d3.entries(d.data).filter(function(elem) { 
					return (elem.key >= start_date && elem.key <= end_date) && elem.value.value != null; 
				});
				filtered_data = filtered_data.sort(function(a,b) { return d3.ascending(a.key, b.key) });
				y.domain(d3.extent(filtered_data, function(a) {return a.value.value}));
				return spark_line(filtered_data);
			});
		// -----------------
		
		calc_cells = series_rows.selectAll("td.calc")
			.data(function(d) {return sp_calcs(d,filtered_dates[0], filtered_dates[filtered_dates.length - 1])})
			.html(calc_html);

	}
	
	function update_table(event, ui) {
		min_date = dates[ui.values[0]];
		max_date = dates[ui.values[1]];
		trim_table(min_date, max_date);
		$("#table_date_range").html(date_header(min_date, max_date));		
	}
	function update_spark(event, ui) {
		min_date = dates[ui.values[0]];
		max_date = dates[ui.values[1]];
		trim_spark(min_date, max_date);
		$("#spark_date_range").html(date_header(min_date, max_date));		
	}

	var spark_slider;
	var table_slider;

	$(function() {
    	spark_slider = $( "#spark_slider" ).slider({
    		range: true,
    		min: 0,
    		max: dates.length-1,
    		values: [0,dates.length-1],
    		slide: update_spark,
			change: update_spark,
		});
    });

	$(function() {
    	table_slider = $( "#table_slider" ).slider({
    		range: true,
    		min: 0,
    		max: dates.length-1,
    		values: [0,dates.length-1],
			change: update_table,
    		slide: update_table

		});
		set_table_periods_back(12);
    });


	function match(slider_name) {
		if (slider_name === "spark") {
			s1 = spark_slider; 
			s2 = table_slider; 
		} else {
			s1 = table_slider; 
			s2 = spark_slider; 
		}
		sv = s1.slider("values");
		s2.slider("values",sv);
		
	}

	function set_table_periods_back(num_periods) {
		var slider_len = dates.length;
		num_periods = num_periods >= slider_len ? slider_len : num_periods;
		//have to do this in order so as not to cross the slider positions
		table_slider.slider("values",1,slider_len-1);
		table_slider.slider("values",0,slider_len-num_periods);
		
	}
	
	function set_spark_periods_back(num_periods) {
		var slider_len = dates.length;
		num_periods = num_periods >= slider_len ? slider_len : num_periods;
		//have to do this in order so as not to cross the slider positions
		spark_slider.slider("values",1,slider_len-1);
		spark_slider.slider("values",0,slider_len-num_periods);
	}

	$("#spark_date_range").html(date_header(dates[0], dates[dates.length-1]));
	$("#table_date_range").html(date_header(dates[0], dates[dates.length-1]));
	
</script>
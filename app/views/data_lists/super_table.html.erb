<!--<link rel="stylesheet" href="http://code.jquery.com/ui/1.9.0/themes/base/jquery-ui.css" />-->
<!--script src="/javascripts/ui/jquery-ui.js"></script--> <!--for some reason including this breaks the search-->
<%= javascript_include_tag 'd3.v2.min' %>

<style>
	#spark_adjuster {width: 300px; float:left; margin:0 20px 0 10px; position:relative; height:50px;}
	#table_adjuster {width:500px; float:left; margin:0 20px 0 20px; position:relative; height:50px;}
	td.calc,
	td.inner {font-size:10px; line-height:13px}
	tr#header_row th, tr#header_row_clone th {font-size:10px; font-weight:bold; border-bottom:1px solid gray}
	tr#header_row_clone th.header_col {min-width: 175px;}
	tr#header_row_clone th.spark_col {min-width: 120px;}

	span.level {font-size:11px}
	span.yoy { color: gray}
	span.yoy_diff { color :gray}

	div.slider {position:absolute; width:100%; left:0px; top: 0px;}
	div.slider_label,
	table.date_range {top:15px;}
	div.slider_label {width:190px; position:absolute; left:0px;}
	table.date_range {color:gray;  font-weight:normal; width:100px; position:absolute; right:0px;}
	table.date_range td {font-size:11px; line-height:13px; border:0;}
	div.range_links {font-size:11px; left:0px; top: 30px; position:absolute; width:240px;}

	span#start_date, span#end_date {color: black}
	td span.s_desc {font-size:9px; line-height:12px; color:gray;}
	td div {line-height:12px}
	table#data_table {clear:both; table-layout:fixed; width:0px;}
	table#data_table th.header_col {width: 175px;}
	table#data_table th.date_col {width: 60px;}
	table#data_table th.spark_col {width: 120px;}
	table#data_table th.range_col {width: 120px;}
	table#data_table th {width:85px}
	
	tr#header_row_clone th.header_col {min-width: 175px;}
	tr#header_row_clone th.spark_col {min-width: 120px;}
	tr#header_row_clone th.calc {min-width:85px}
	tr#header_row_clone th.range_col {width: 120px; min-width: 120px}
	tr#header_row_clone th.date_col {width: 60px; min-width: 60px;}

	#data_table tr#header_row th {background-color: transparent; padding: 0;}
	tr#header_row_clone th {background-color: transparent; padding: 0;}
	table#data_table th.calc, table#header_table th.calc {line-height:13px;}
	div#frequency_selector {padding-bottom:5px;}

	div#table_wrapper {width:auto;}
	table#header_table, table#column_table {background-color: #fff;}
	table#header_table {position:absolute;top:203px;left:8px;z-index: 10;}
	table#column_table {position:absolute;top:204px;left:8px;z-index:9;width: 179px;padding-top: 41px;}
	table#column_table td {height:40px;min-height: 40px;border-collapse: separate;border-spacing: 2px;}

	table#data_table td.header_col {height:40px;min-height: 40px;}

  .fixed-height {height: 40px; overflow: auto}

	div#adjuster_wrapper {width: 885px;}
	div#top-level-nav, div#chart-board-nav {width:1064px;}

	ul#ui-id-1 {font-size:10px; z-index: 11 !important;}

</style>

<%= link_to 'Edit this list', action: :edit %> || <%= link_to 'Reset filters', {} %>
<div id="frequency_selector">
  <%= form_tag "/data_lists/super_table/#{@data_list.id}" %>
    <%= generate_filter_controls(@geo, @freq, @seasonally_adjusted) %>
    <%= submit_tag 'Show' %>
  </form>
</div>

<div id="adjuster_wrapper">
	<div id="spark_adjuster">
		<div id="spark_slider" class="slider"></div>
		<div class="slider_label">Sparkline Date Range</div>
		<table id="spark_date_range" class="date_range"></table>
		<div class="range_links">
			<a href="#" onclick="match('table')">Match Table</a>
			<a href="#" onclick="set_spark_periods_back(5)">Last 5</a>
			<a href="#" onclick="set_spark_periods_back(12)">12</a>
			<a href="#" onclick="set_spark_periods_back(24)">24</a>
			<a href="#" onclick="set_spark_periods_back(60)">60</a>
			<a href="#" onclick="set_spark_periods_back(120)">120</a>

		</div>
	</div>

	<div id="table_adjuster">
		<div id="table_slider" class="slider"></div>
		<div class="slider_label">Table Date Range</div>
		<table id="table_date_range" class="date_range"></table>
		<div class="range_links">
			<a href="#" onclick="match('spark')">Match Sparkline</a>
			<a href="#" onclick="set_table_periods_back(5)">Last 5</a>
			<a href="#" onclick="set_table_periods_back(12)">12</a>
			<a href="#" onclick="set_table_periods_back(24)">24</a>
			<a href="#" onclick="set_table_periods_back(60)">60</a>
			<a href="#" onclick="set_table_periods_back(120)">120</a>		
		</div>
	</div>
</div>

<div id="table_wrapper"> <!--dt-->
	<table id = "header_table"></table>
	<table id = "column_table"></table>
	<table id="data_table">
	</table>
</div>

<script>
	function perc(num) {
		if (num === null) return "";
		return num.toFixed(2) + "%";
	}
	function f(num) {
		if (num === null) return "";
		return num.toFixed(2);
	}
	function freq(series_name){
		return series_name.split(".")[1];
	}
	function date_h(date,freq)
	{
		var parts = date.split("-");
		if (freq.toUpperCase() === "M") {
			return parts[0]+"m"+parts[1];
		} else if (freq.toUpperCase() === "Q") {
			var q = Math.floor(parseInt(parts[1])/3)+1;
			return parts[0]+"q"+q;
		} else if (freq.toUpperCase() === "A") {
			return parts[0];
		} else {
			return date;
		}
		
	}
	
	function pf(num) {
		if (num === "") {
		    return null;
    }
		return parseFloat(num);
	}

	var all_data = <%= @data_list.get_all_series_data_with_changes(@freq, @geo, @seasonally_adjusted).to_json.html_safe %>;
	var frequency = freq(d3.keys(all_data)[0]);
	var all_dates = {};
	d3.values(all_data).forEach(function(elem) { 
		d3.keys(elem.data).forEach(function(date) {
			all_dates[date]=1
		})
	});
	
	dates = d3.keys(all_dates).sort(d3.ascending);

	// --------- Fill get all arrays to have matching dates --------
	filler_data_array = {};
	d3.keys(all_dates).forEach(function(date) {filler_data_array[date] = { value:null, yoy:null, yoy_diff:null, ytd:null, ytd_diff:null } });

	d3.entries(all_data).forEach(function (elem) {
		all_data[elem.key].data = $.extend({}, filler_data_array, elem.value.data);
	});
	// -------------------------------------------------------------
	
	var test_area = d3.select("#test_area");
	var data_table = d3.select("#data_table");
	var table_wrapper = d3.select("#table_wrapper"); //dt
	var header_table = d3.select("#header_table"); //dt
	var column_table = d3.select("#column_table"); //dt

	var header = data_table.append("tr")	
		.attr("id", "header_row");
	
	function head_html(line1, line2, line3) {
		line1 = line1;
		line2 = line2 != "" ? ("<br/>"+line2) : "";
		line3 = line3 != "" ? ("<br/>"+line3) : "";
		return line1+line2+line3
	}
	header.append("th").text("").attr("class", "header_col");
	header.append("th").text("").attr("class", "spark_col");
	header.append("th").html(head_html("Last Obs","date", "YTD %chg")).attr("class", "calc sel_col");
	header.append("th").html(head_html("Min Obs","date", "Last - Min")).attr("class", "calc min_col");
	header.append("th").html(head_html("Max Obs","date", "Last - Max")).attr("class", "calc max_col");
	header.append("th").html(head_html("%chg fr first","%chg fr min", "%chg fr max")).attr("class", "calc chg_col");
	header.append("th").html(head_html("Max - Min","Last-Min/Max-Min", "Last-Max/Max-Min")).attr("class", "calc range_col");
		
	header
		.selectAll("th.date_col")
		.data(dates)
		.enter()
		.append("th")
		.attr("class", "date_col")
		.html(function(d) {
			return date_h(d,frequency);
		});
		
	$('#header_row').clone().appendTo('#header_table');
	$('#header_table #header_row').attr("id","header_row_clone");

	var series_rows = data_table.selectAll("tr.series")
		.data(d3.entries(all_data));
		
	var spark_height = 30;
	var spark_width = 120;
	
	series_rows.enter()
		.append("tr")
		.attr("class", "series");
	
	series_rows
		.append("td")
		.attr("class", "header_col")
		.html(function(d) {
			return "<div class='fixed-height'><div><a href='/series/analyze/"+d.value.id+"' target='_blank'>" + d.key + "</a></div>"
				+ "<div><span class='s_desc'>" + d.value.desc + "</span></div></div>"
		});
		
	series_rows
		.append("td")
		.append("svg")
		.attr("id", function(d) {return "row_"+d.key})
		.attr("class", "spark_box")
		.attr("height", spark_height)
		.attr("width", spark_width);
	
	var x = d3.scale.linear()
		.range([0,spark_width])
		.domain([new Date(dates[0]), new Date(dates[dates.length-1]) ])
		
	var y = d3.scale.linear()
		.range([spark_height,0]);

	var spark_line = d3.svg.line()
		.x(function(d) { return x(new Date(d.key))})
		.y(function(d) { return y(d.value.value)})
		
	var spark_paths = d3.selectAll("svg.spark_box")
		.append("path")
		.attr("class", "spark")
		.data(d3.values(all_data));
				
	spark_paths
		.attr("d", function(d) {
			sorted_data = d3.entries(d.data).sort( function(a,b) {
				return d3.ascending(a.key, b.key)
			}).filter(function(elem) {return elem.value.value != null});
			y.domain(d3.extent(sorted_data, function(a) {return a.value.value}));
			return spark_line(sorted_data)
		})
		.attr("stroke", "red")
		.attr("fill", "none");
		
	
	function sp_calcs(d, start_date,end_date) {

		var data = d3.entries(d.value.data).filter(function(elem) {
			return (elem.value.value != null) && (elem.key >= start_date && elem.key <= end_date); 
		}).sort(function(a,b) { return d3.ascending(a.key, b.key)});
		
		if (data.length === 0) //for undefined series
			return [{col_name:"sel",   value:"", yoy:"", yoy_diff:""},
					{col_name:"min",   value:"", yoy:"", yoy_diff:""},
					{col_name:"max",   value:"", yoy:"", yoy_diff:""},
					{col_name:"chg",   value:"", yoy:"", yoy_diff:""},
					{col_name:"range", value:"", yoy:"", yoy_diff:""}];
					
		var sp = data[data.length-1]; //selected_point = last point for now
		var sp_val = sp.value.value; 

		var fp = data[0]; //first point
		var fp_val = fp.value.value;
		
		var sorted_data = data.sort(function(a,b) {
			return d3.ascending(a.value.value, b.value.value);
		});
		
		var min_elem = sorted_data[0];
		var min = min_elem.value.value;
		var min_date = min_elem.key;
		var min_diff = sp_val - min;
		
		var max_elem = sorted_data[sorted_data.length-1];
		var max = max_elem.value.value;
		var max_date = max_elem.key;
		var max_diff = sp_val-max;
		
		return [{col_name:"sel", value:f(sp_val), yoy:date_h(sp.key,frequency), yoy_diff:perc(sp.value.ytd)},
				{col_name:"min", value:f(min), yoy:date_h(min_date,frequency), yoy_diff:f(min_diff)},
				{col_name:"max", value:f(max), yoy:date_h(max_date,frequency), yoy_diff:f(max_diff)},
				{col_name:"chg", value:perc((sp_val-fp_val)/fp_val*100), yoy:perc((sp_val-min)/min*100), yoy_diff:perc((sp_val-max)/max*100)},
				{col_name:"range", value:f(max-min), yoy:perc((sp_val-min)/(max-min)*100), yoy_diff:perc((sp_val-max)/(max-min)*100)}];
	}
	
	function calc_html(d) {
		var return_rows = "";

		// append value (row 1)
		if (d.value < 0) {
			//console.log("VALUE < 0")
			return_rows += "<span class='level' style='color:red'>" + d.value + "</span><br />";
		} else {
			return_rows += "<span class='level' style='color:#1572B0'>" + d.value + "</span><br />";
		}

		// append time period (row 2)
		return_rows += "<span class='yoy'>" + d.yoy + "</span><br />";

		// append %age (row 3)
		if (parseFloat(d.yoy_diff) >= 0) {
			return_rows += "<span class='yoy_diff' style='color:#1572B0'>" + d.yoy_diff + "</span>"	;
		} else {
			return_rows += "<span class='yoy_diff' style='color:red'>" + d.yoy_diff + "</span>";
		}

		return return_rows
	}
	
	//var sp_calcs = selected_point_calculations(dates[0], dates[dates.length-1]);

	var calc_cells = series_rows.selectAll("td.calc")
		.data(function(d) {return sp_calcs(d,dates[0], dates[dates.length-1])})
		.enter()
		.append("td")
		.attr("class", "calc")
		.attr("id",function(d) {return "col_"+d.col_name})
		.html(calc_html);

	// ----------------------------------------------
	data_cells = series_rows.selectAll("td.inner")
		.data(function(d) {return d3.entries(d.value.data).sort(function(a,b) 
			{return d3.ascending(a.key, b.key)}
		)})
		.enter()
		.append("td")
		.attr("class", "inner")
		.html(cell_html);
				
	function cell_html(d){
		var return_rows = "";

		if (d.value.value < 0) {
			//console.log("VALUE < 0")
			return_rows += "<span class='level' style='color:red'>" + f(d.value.value) + "</span><br/>"
		} else {
			return_rows += "<span class='level' style='color:#1572B0'>" + f(d.value.value) + "</span><br/>"
		}
		if (d.value.yoy < 0) {
			//console.log("YOY < 0")
			return_rows += "<span class='yoy' style='color:red'>" + perc(d.value.yoy) + "</span><br/>"
		} else {
			return_rows += "<span class='yoy' style='color:#1572B0'>" + perc(d.value.yoy) + "</span><br/>"
		}
		if (d.value.yoy_diff < 0) {
			//console.log("YOY_DIFF < 0")
			return_rows += "<span class='yoy_diff' style='color:red'>" + f(d.value.yoy_diff) + "</span><br/>";	
		} else {
			return_rows += "<span class='yoy_diff' style='color:#1572B0'>" + f(d.value.yoy_diff) + "</span><br/>";
		}

		return return_rows
	}
	
	function date_header(start_date, end_date) {
		return ""
		+ "<tr><td>Start</td><td><span id='start_date'>" + date_h(start_date,frequency) + "</span></tr>"
		+ "<tr><td>End</td><td><span id='end_date'>" + date_h(end_date,frequency) + "</span></tr>"
	}
	
	function trim_table(start_date,end_date) {
		
		// Adjust headers
		var filtered_dates = dates.filter(function(elem) {
			return (elem >= start_date && elem <= end_date); 
		});

		var header_cells = d3.select("tr#header_row").selectAll("th.date_col")
			.data(filtered_dates);
			
		header_cells.enter().append("th").attr("class", "date_col");
		header_cells.html(function(d) {return date_h(d,frequency)});
		header_cells.exit().remove();

		// repeating for the header clone:
		var header_cells_clone = d3.select("tr#header_row_clone").selectAll("th.date_col")
			.data(filtered_dates);

		header_cells_clone.enter().append("th").attr("class", "date_col");
		header_cells_clone.html(function(d) {return date_h(d,frequency)});
		header_cells_clone.exit().remove();

		// -------------------
		
		// Adjust data cells
		var data_cells = series_rows.selectAll("td.inner")
			.data(function(d) {
				var filtered_data = d3.entries(d.value.data).filter(function(elem) {
					return (elem.key >= start_date && elem.key <= end_date); 
				});
				return filtered_data.sort(function(a,b) {
						return d3.ascending(a.key, b.key)
					});
			});
				
		data_cells
			.enter()
			.append("td")
			.attr("class", "inner");
		
		data_cells.html(cell_html);

		data_cells
			.exit()
			.remove();
	}
	
	function trim_spark(start_date,end_date) {
		var filtered_dates = dates.filter(function(elem) {
			return (elem >= start_date && elem <= end_date); 
		});
		
		// ------------------------
		
		// Adjust sparklines
		x.domain([new Date(filtered_dates[0]), new Date(filtered_dates[filtered_dates.length - 1])]);
		d3.selectAll("path.spark")
			.attr("d", function(d) {
				var filtered_data = d3.entries(d.data).filter(function(elem) {
					return (elem.key >= start_date && elem.key <= end_date) && elem.value.value != null; 
				});
				filtered_data = filtered_data.sort(function(a,b) { return d3.ascending(a.key, b.key) });
				y.domain(d3.extent(filtered_data, function(a) {return a.value.value}));
				return spark_line(filtered_data);
			});
		// -----------------
		
		calc_cells = series_rows.selectAll("td.calc")
			.data(function(d) {return sp_calcs(d,filtered_dates[0], filtered_dates[filtered_dates.length - 1])})
			.html(calc_html);

	}
	
	function update_table(_, ui) {
		var min_date = dates[ui.values[0]];
		var max_date = dates[ui.values[1]];
		trim_table(min_date, max_date);
		$("#table_date_range").html(date_header(min_date, max_date)); // updates date range under slider
	}
	function update_spark(_, ui) {
		var min_date = dates[ui.values[0]];
		var max_date = dates[ui.values[1]];
		trim_spark(min_date, max_date);
		$("#spark_date_range").html(date_header(min_date, max_date));		
	}

	var spark_slider;
	var table_slider;

	$(function() {
    	spark_slider = $( "#spark_slider" ).slider({
    		range: true,
    		min: 0,
    		max: dates.length-1,
    		values: [0,dates.length-1],
    		slide: update_spark,
			  change: update_spark
		});
    });

	$(function() {
    	table_slider = $( "#table_slider" ).slider({
    		range: true,
    		min: 0,
    		max: dates.length-1,
    		values: [0,dates.length-1],
        change: update_table,
    		slide: update_table

		});
		set_table_periods_back(12);
    });


	function match(slider_name) {
	  var s1, s2, sv;
		if (slider_name === "spark") {
			s1 = spark_slider;
			s2 = table_slider; 
		} else {
			s1 = table_slider; 
			s2 = spark_slider; 
		}
		sv = s1.slider("values");
		s2.slider("values",sv);
	}

	function set_table_periods_back(num_periods) {
		var slider_len = dates.length;
		num_periods = num_periods >= slider_len ? slider_len : num_periods;
		//have to do this in order so as not to cross the slider positions
		table_slider.slider("values",1,slider_len-1);
		table_slider.slider("values",0,slider_len-num_periods);
		
	}
	
	function set_spark_periods_back(num_periods) {
		var slider_len = dates.length;
		num_periods = num_periods >= slider_len ? slider_len : num_periods;
		//have to do this in order so as not to cross the slider positions
		spark_slider.slider("values",1,slider_len-1);
		spark_slider.slider("values",0,slider_len-num_periods);
	}

	$("#spark_date_range").html(date_header(dates[0], dates[dates.length-1]));
	$("#table_date_range").html(date_header(dates[0], dates[dates.length-1]));

	/* 
	 * Grab sign-in notice and hide it so absolute positioning of the headers
	 * does not stay pushed down (initially faded it out but hiding is prob better)
	 */
	$("p.notice").css("display","none");

	/*************************************************************************/
	/********************* FIXED HEADER AND LEFT COLUMN **********************/
	/*************************************************************************/

	// ------------ /
	// HEADER       /
	// ------------ /

	// 1. Prev. grabbed top offset of #header_row (151px - 03/25/15)
	// 2. Check if window is lower than this offset
	// 3. Once the offset is less than the top of the page, header should stick
	//    to top of window. Do this by setting "top" of header element to 
	//    the window's current scrollTop()
	//    - this fixes the horizontal scroll problem.

	// STEP 1

	header_table = $('#header_table');
	column_table = $('#column_table');

	// STEP 2 & 3

    var fixedHeaderColumn = function() {
      $(window).scroll(function () {
        wi_top = $(window).scrollTop(); // how far down window is scrolled
        wi_left = $(window).scrollLeft(); // how far to the right window is scrolled

        th_top = 203; // absolute. based on #header_row (offset from top)

        // HEADER ROW MOTION
        if (wi_top >= th_top) {
          header_table.css("top", $(window).scrollTop());
          header_table.css("background-color", "#eee");
        } else {
          header_table.css("top", "");
          header_table.css("background-color", "");
        }

        // LEFT COLUMN MOTION
        if (wi_left > 8) {
          column_table.css("left", $(window).scrollLeft());
          column_table.css("background-color", "#eee");
        } else {
          column_table.css("left", "");
          column_table.css("background-color", "");
        }

      });
    };

	// ------------ /
	// LEFT COLUMN  /
	// ------------ /

	// 1. Generate a copy of the left column
	//    - Must loop through all the series on the page (in #data_table) and
	//      grab all .series .header_col elements

	$('#data_table tr.series td.header_col').each(function() {
		//$('tr.series_clone').appendTo("#column_table");
		// create tr in #column_table how?
		new_td = $(this).clone().appendTo('#column_table');
		new_td.wrap("<tr></tr>");
	});

  fixedHeaderColumn();

  //Reset header and left column positions when page is printed

  var beforePrint = function() {
    header_table.css('top', 185);
    column_table.css('left', 8);
  };
  var afterPrint = function() {
    fixedHeaderColumn();
  };

  if (window.matchMedia) {
    var mediaQueryList = window.matchMedia('print');
    mediaQueryList.addListener(function(mql) {
      if (mql.matches) {
        beforePrint();
      } else {
        afterPrint();
      }
    });
  }

  window.onbeforeprint = beforePrint;
  window.onafterprint = afterPrint;

</script>
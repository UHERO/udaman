
<style>
	h2 {font-weight:normal;}
	table#datacells td svg {margin: 0 auto;}
	.budget_svg {float:left; }
	.line { fill: none; stroke: steelblue; stroke-width: 1.5px; }
	.label-text {font-size:8px; font-family:Arial, sans-serif; color: #888888;}
	body {width:1200px;}
	div#all_charts {clear:both;}
</style>

<p class="notice"><%= notice %></p>
<h1>Prognoz Export File: <%= @output_file.name %></h1>
<p>
	<%= link_to 'Edit', edit_prognoz_data_file_path(@output_file) %> |
	<%= link_to 'Delete', @output_file, :method => :delete %> | 
	<%= link_to 'Back', :action => 'index' %> | 
	Path: <td><%= @output_file.filename %></td></tr>
</p>

<div id="all_charts">
	<svg id="matching_diffs"></svg>
</div>

<%= javascript_include_tag 'd3.v2.min' %>
<script type="text/javascript">

	var s_labels = {
	<%@diffs.each do |s_name, diff|%>
	"<%= s_name%>":
		<% if diff.nil? %>
			"Series: <%= s_name %> is missing",
		<% else %>
			"<%= s_name%>\n<% diff[:diffs].each do |date, difference| %> <%= date %>: <%= difference.nil? ? 'no udaman value' : difference.round(3) %>\n <%end%>",
		<%end%>
	<%end%>	
	};
	var params = {
		scale: 1,
		viz_data: [],
		unitw: 4,
		unith: 1,
		h: 10,
		left_margin: 100,
		space: 1,
		export: function () {},
	};

	function pf(num) {
		//if (num === "") return 0;
		return parseFloat(num.replace(",", ""));
	}

	function convert_to_color(num) {
		switch(parseInt(num))
		{
		case -1: return "#111111";
		case 0: return "#EEE";
		case 1: return "#CCC";
		case 2: return "#88BB88";
		case 3: return "#FF0000";
		case 4: return "#00FF00";
		default: return "#111111";
		}
	}

	function assign_colors(data_array) {
		da = data_array.splice(0,3);
		//return data_array.map(function(elem) {return convert_to_color(elem)});
		var color_size_array = [];
		var current_val = data_array[0];
		var current_size = 0;
		var i=0;
		var length = data_array.length
		for (i=0; i < length; i++) {
			check_val = data_array.shift();
			if (check_val != current_val) {
				color_size_array.push({color: convert_to_color(current_val), size: current_size, end_pos: i, name: da[1]});
				current_val = check_val;
				current_size = 1;
			} else {
				current_size+=1;
			}
		}
		if (current_val === "-1") {
			current_size = 10;
			i = 9;
		}
		color_size_array.push({color: convert_to_color(current_val), size: current_size, end_pos: i, name: da[1] });
		return color_size_array;
	}

	function matching_diffs(text) {
		params.viz_data = text;
		max_length = 0;
		var data = d3.csv.parseRows(text);
		var formatted_data = data.map(function(elem) {
			max_length = elem.length > max_length ? elem.length : max_length;
			return { pdf_id: elem[0], name:elem[1], id:elem[2], data: assign_colors(elem) }
		}).filter(function(elem) {return elem.pdf_id === "<%= @output_file.id %>"});

		var svg = d3.select("svg#matching_diffs")
			.attr("height", function(d) {return (params.unith) * (max_length)})
			.attr("width", (params.unitw + params.space) * formatted_data.length);
			//.attr("fill", "#444444");

		var rows = svg.selectAll("g")
			.data(formatted_data)
			.enter()
			.append("g")
			.attr("transform", function(d, i) {return "translate(" +  (i * (params.unitw+params.space) ).toString() + ",0)"})
			.append("a")
			.attr("xlink:href", function(d) {return "/series/" + d.id })
			.attr("target", "_blank")

			;
			
			//.attr("y", function(d, i) {return i * params.h * params.scale});
		
		var datapoints = rows.selectAll("rect")
			.data(function(d) {return d.data})
			.enter()
			.append("rect")
			.attr("height", function(d) {return (d.size * (params.unith))})
			.attr("width", params.unitw)
			.attr("y", function(d) {return ((d.end_pos-d.size) * (params.unith))})
			.attr("x", 0)
			.attr("fill", function(d) {return d.color})
			.append("svg:title")
			.text(function(d){return s_labels[d.name]} )
			;
	}		

	d3.text('/prognoz_diffs.csv', 'text/csv', matching_diffs); 
</script>
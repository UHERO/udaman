require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TransformationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Transformation. As you add validations to Transformation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        key: 'pch',
        description: 'Percent change since last value',
        formula: '(x(t) - x(t-1))/x(t-1)'
    }
  }

  let(:invalid_attributes) {
    skip('Add a hash of attributes invalid for your model')
  }

  before(:each) do
    @request.env['devise.mapping'] = Devise.mappings[:user]
    user = FactoryGirl.create(:user)
    sign_in user
  end

  describe 'GET #index' do
    it 'assigns all transformations as @transformations' do
      transformation = Transformation.create! valid_attributes
      get :index, {}
      expect(assigns(:transformations)).to eq([transformation])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested transformation as @transformation' do
      transformation = Transformation.create! valid_attributes
      get :show, {id: transformation.to_param}
      expect(assigns(:transformation)).to eq(transformation)
    end
  end

  describe 'GET #new' do
    it 'assigns a new transformation as @transformation' do
      get :new, {}
      expect(assigns(:transformation)).to be_a_new(Transformation)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested transformation as @transformation' do
      transformation = Transformation.create! valid_attributes
      get :edit, {id: transformation.to_param}
      expect(assigns(:transformation)).to eq(transformation)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Transformation' do
        expect {
          post :create, {transformation: valid_attributes}
        }.to change(Transformation, :count).by(1)
      end

      it 'assigns a newly created transformation as @transformation' do
        post :create, {transformation: valid_attributes}
        expect(assigns(:transformation)).to be_a(Transformation)
        expect(assigns(:transformation)).to be_persisted
      end

      it 'redirects to the created transformation' do
        post :create, {transformation: valid_attributes}
        expect(response).to redirect_to(Transformation.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved transformation as @transformation' do
        post :create, {transformation: invalid_attributes}
        expect(assigns(:transformation)).to be_a_new(Transformation)
      end

      it "re-renders the 'new' template" do
        post :create, {transformation: invalid_attributes}
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {
        {
            key: 'chg',
            description: 'Change since last value',
            formula: '(x(t) - x(t-1))'
        }
      }

      it 'updates the requested transformation' do
        transformation = Transformation.create! valid_attributes
        put :update, {id: transformation.to_param, transformation: new_attributes}
        transformation.reload
        skip('Add assertions for updated state')
      end

      it 'assigns the requested transformation as @transformation' do
        transformation = Transformation.create! valid_attributes
        put :update, {id: transformation.to_param, transformation: valid_attributes}
        expect(assigns(:transformation)).to eq(transformation)
      end

      it 'redirects to the transformation' do
        transformation = Transformation.create! valid_attributes
        put :update, {id: transformation.to_param, transformation: valid_attributes}
        expect(response).to redirect_to(transformation)
      end
    end

    context 'with invalid params' do
      it 'assigns the transformation as @transformation' do
        transformation = Transformation.create! valid_attributes
        put :update, {id: transformation.to_param, transformation: invalid_attributes}
        expect(assigns(:transformation)).to eq(transformation)
      end

      it "re-renders the 'edit' template" do
        transformation = Transformation.create! valid_attributes
        put :update, {id: transformation.to_param, transformation: invalid_attributes}
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested transformation' do
      transformation = Transformation.create! valid_attributes
      expect {
        delete :destroy, {id: transformation.to_param}
      }.to change(Transformation, :count).by(-1)
    end

    it 'redirects to the transformations list' do
      transformation = Transformation.create! valid_attributes
      delete :destroy, {id: transformation.to_param}
      expect(response).to redirect_to(transformations_url)
    end
  end

end

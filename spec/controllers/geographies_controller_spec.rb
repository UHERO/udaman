require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe GeographiesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Geography. As you add validations to Geography, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {universe: 'UHERO', fips: '15001', display_name: 'City and County of Honolulu', display_name_short: 'Honolulu', handle: 'HNL'}
  }

  let(:invalid_attributes) {
    skip('Add a hash of attributes invalid for your model')
  }

  before(:each) do
    @request.env['devise.mapping'] = Devise.mappings[:user]
    user = FactoryBot.create(:user)
    sign_in user
  end

  describe 'GET #index' do
    it 'assigns all geographies as @geographies' do
      geography = Geography.create! valid_attributes
      get :index, params: {}
      expect(assigns(:geographies)).to eq([geography])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested geography as @geography' do
      geography = Geography.create! valid_attributes
      get :show, params: {id: geography.to_param}
      expect(assigns(:geography)).to eq(geography)
    end
  end

  describe 'GET #new' do
    it 'assigns a new geography as @geography' do
      get :new, params: {}
      expect(assigns(:geography)).to be_a_new(Geography)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested geography as @geography' do
      geography = Geography.create! valid_attributes
      get :edit, params: {id: geography.to_param}
      expect(assigns(:geography)).to eq(geography)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Geography' do
        expect {
          post :create, params: {geography: valid_attributes}
        }.to change(Geography, :count).by(1)
      end

      it 'assigns a newly created geography as @geography' do
        post :create, params: {geography: valid_attributes}
        expect(assigns(:geography)).to be_a(Geography)
        expect(assigns(:geography)).to be_persisted
      end

      it 'redirects to the created geography' do
        post :create, params: {geography: valid_attributes}
        expect(response).to redirect_to(Geography.last)
      end
    end

    context 'with invalid params' do
      xit 'assigns a newly created but unsaved geography as @geography' do
        post :create, params: {geography: invalid_attributes}
        expect(assigns(:geography)).to be_a_new(Geography)
      end

      it "re-renders the 'new' template" do
        post :create, params: {geography: invalid_attributes}
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {
        {universe: 'UHERO', fips: '15', display_name: 'State of Hawaii', display_name_short: 'Hawaii', handle: 'HI'}
      }

      it 'updates the requested geography' do
        geography = Geography.create! valid_attributes
        put :update, params: {id: geography.id, geography: new_attributes}
        geography.reload
        skip('Add assertions for updated state')
      end

      it 'assigns the requested geography as @geography' do
        geography = Geography.create! valid_attributes
        put :update, params: {id: geography.to_param, geography: valid_attributes}
        expect(assigns(:geography)).to eq(geography)
      end

      it 'redirects to the geography' do
        geography = Geography.create! valid_attributes
        put :update, params: {id: geography.to_param, geography: valid_attributes}
        expect(response).to redirect_to(geography)
      end
    end

    context 'with invalid params' do
      it 'assigns the geography as @geography' do
        geography = Geography.create! valid_attributes
        put :update, params: {id: geography.to_param, geography: invalid_attributes}
        expect(assigns(:geography)).to eq(geography)
      end

      it "re-renders the 'edit' template" do
        geography = Geography.create! valid_attributes
        put :update, params: {id: geography.to_param, geography: invalid_attributes}
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested geography' do
      geography = Geography.create! valid_attributes
      expect {
        delete :destroy, params: {id: geography.to_param}
      }.to change(Geography, :count).by(-1)
    end

    it 'redirects to the geographies list' do
      geography = Geography.create! valid_attributes
      delete :destroy, params: {id: geography.to_param}
      expect(response).to redirect_to(geographies_url)
    end
  end

end

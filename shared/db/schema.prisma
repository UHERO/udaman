datasource db {
  provider = "mysql"
  url      = env("DB_MYSQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model api_applications {
  id              Int                       @id @default(autoincrement())
  universe        api_applications_universe @default(UHERO)
  name            String?                   @db.VarChar(255)
  hostname        String?                   @db.VarChar(255)
  api_key         String?                   @db.VarChar(255)
  created_at      DateTime                  @db.DateTime(0)
  updated_at      DateTime                  @db.DateTime(0)
  github_nickname String?                   @db.VarChar(255)

  @@unique([universe, name], map: "index_api_applications_on_universe_and_name")
}

model ar_internal_metadata {
  key        String   @id @db.VarChar(255)
  value      String?  @db.VarChar(255)
  created_at DateTime @db.DateTime(0)
  updated_at DateTime @db.DateTime(0)
}

model aremos_series {
  id                 Int       @id @default(autoincrement())
  name               String?   @db.VarChar(255)
  frequency          String?   @db.VarChar(255)
  description        String?   @db.VarChar(255)
  start              String?   @db.VarChar(255)
  end                String?   @db.VarChar(255)
  data               String?   @db.LongText
  aremos_data        String?   @db.LongText
  aremos_update_date DateTime? @db.Date
  created_at         DateTime? @db.DateTime(0)
  updated_at         DateTime? @db.DateTime(0)

  @@index([name], map: "index_aremos_series_on_name")
}

// !THIS TABLE WILL BE REMOVED & REPLACED WITH NEW AUTH
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
// model authorizations {
//   user_id          Int
//   provider         String  @db.VarChar(255)
//   provider_user_id Int
//   name             String? @db.VarChar(255)
//   email            String? @db.VarChar(255)
//   users            users   @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_rails_4ecef5b8c5")

//   @@index([user_id], map: "fk_rails_4ecef5b8c5")
//   @@index([provider_user_id], map: "index_authorizations_on_provider_user_id")
//   @@ignore
// }

// !THIS FEATURE IS NO LONGER USED. PREVIOUSLY PART OF ASANA ISSUE TRACKING
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
// model branch_code {
//   last_branch_code_number Int @default(0)

//   @@ignore
// }

model categories {
  id             Int                      @id @default(autoincrement())
  data_list_id   Int?
  default_geo_id Int?
  universe       categories_universe      @default(UHERO)
  created_at     DateTime                 @db.DateTime(0)
  updated_at     DateTime                 @db.DateTime(0)
  hidden         Boolean?                 @default(false)
  masked         Boolean                  @default(false)
  header         Boolean?                 @default(false)
  list_order     Int?
  order          Int?
  name           String?                  @db.VarChar(255)
  ancestry       String?                  @db.VarChar(255)
  default_handle String?                  @db.VarChar(255)
  default_freq   categories_default_freq?
  meta           String?                  @db.VarChar(255)
  description    String?                  @db.VarChar(500)
  geographies    geographies?             @relation(fields: [default_geo_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_c390c9a75e")
  data_lists     data_lists?              @relation(fields: [data_list_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_cats_data_list_id")

  @@index([default_geo_id], map: "fk_rails_c390c9a75e")
  @@index([data_list_id], map: "fk_rails_cats_data_list_id")
  @@index([ancestry], map: "index_categories_on_ancestry")
  @@index([universe], map: "index_categories_on_universe")
  @@fulltext([name], map: "index_categories_on_name")
}

model data_list_measurements {
  id             Int                           @id @default(autoincrement())
  data_list_id   Int?
  measurement_id Int?
  list_order     Int                           @default(0)
  indent         data_list_measurements_indent @default(indent0)

  @@unique([data_list_id, measurement_id], map: "index_data_list_measurements_on_data_list_id_and_measurement_id")
  @@index([data_list_id], map: "index_data_list_measurements_on_data_list_id")
  @@index([measurement_id], map: "index_data_list_measurements_on_measurement_id")
}

model data_lists {
  id         Int                 @id @default(autoincrement())
  universe   data_lists_universe @default(UHERO)
  name       String?             @db.VarChar(255)
  startyear  Int?
  endyear    Int?
  created_at DateTime?           @db.DateTime(0)
  updated_at DateTime?           @db.DateTime(0)
  created_by Int?
  updated_by Int?
  owned_by   Int?
  categories categories[]

  @@index([universe], map: "index_data_lists_on_universe")
}

model data_lists_series {
  id           Int @id @default(autoincrement())
  data_list_id Int
  series_id    Int

  @@index([data_list_id], map: "index_data_lists_series_on_data_list_id")
}

model data_points {
  xseries_id     Int
  date           DateTime  @db.Date
  created_at     DateTime  @db.DateTime(0)
  data_source_id Int
  current        Boolean?
  value          Float?
  pseudo_history Int?      @default(0)
  history        DateTime? @db.DateTime(0)
  updated_at     DateTime? @db.DateTime(0)
  change         Float?
  yoy            Float?
  ytd            Float?

  @@id([xseries_id, date, created_at, data_source_id])
  @@index([xseries_id, date, current, updated_at, created_at], map: "dp_xdc_uac")
  @@index([data_source_id], map: "index_on_data_source_id")
  @@index([xseries_id], map: "index_on_xseries_id")
}

model data_source_actions {
  id             Int       @id @default(autoincrement())
  data_source_id Int?
  series_id      Int?
  user_id        Int?
  user_email     String?   @db.VarChar(255)
  action         String?   @db.VarChar(255)
  priority       Int?
  eval           String?   @db.VarChar(500)
  created_at     DateTime? @db.DateTime(0)
  updated_at     DateTime? @db.DateTime(0)
  series         series?   @relation(fields: [series_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_cbe5366b13")

  @@index([series_id], map: "fk_rails_cbe5366b13")
}

model data_source_downloads {
  id                     Int      @id @default(autoincrement())
  data_source_id         Int?
  download_id            Int?
  last_file_vers_used    DateTime @default(dbgenerated("('1970-01-01 00:00:00')")) @db.DateTime(0)
  last_eval_options_used String?  @db.VarChar(1000)

  @@unique([data_source_id, download_id], map: "index_data_source_downloads_on_data_source_id_and_download_id")
}

model data_sources {
  id                  Int                   @id @default(autoincrement())
  clear_before_load   Boolean               @default(false)
  color               String?               @db.VarChar(255)
  dependencies        String?               @db.Text
  description         String?               @db.Text
  disabled            Boolean               @default(false)
  eval                String?               @db.VarChar(500)
  last_error          String?               @db.VarChar(255)
  last_error_at       DateTime?             @db.DateTime(0)
  last_run_at         DateTime?             @db.DateTime(0)
  last_run_in_seconds Decimal?              @db.Decimal(17, 3)
  presave_hook        String?               @db.VarChar(255)
  priority            Int?                  @default(100)
  pseudo_history      Boolean               @default(false)
  reload_nightly      Boolean?              @default(true)
  runtime             Float?                @db.Float
  scale               String                @default("1.0") @db.VarChar(255)
  series_id           Int?
  universe            data_sources_universe @default(UHERO)
  created_at          DateTime?             @db.DateTime(0)
  updated_at          DateTime?             @db.DateTime(0)

  @@index([series_id], map: "index_data_sources_on_series_id")
  @@index([universe], map: "index_data_sources_on_universe")
  @@fulltext([dependencies], map: "index_data_sources_on_dependencies")
  @@fulltext([description], map: "index_data_sources_on_description")
}

model dbedt_uploads {
  id              Int                          @id @default(autoincrement())
  upload_at       DateTime?                    @db.DateTime(0)
  active          Boolean?
  cats_status     dbedt_uploads_cats_status?
  series_status   dbedt_uploads_series_status?
  cats_filename   String?                      @db.VarChar(255)
  series_filename String?                      @db.VarChar(255)
  last_error      String?                      @db.VarChar(255)
  last_error_at   DateTime?                    @db.DateTime(0)
}

model downloads {
  id               Int                     @id @default(autoincrement())
  handle           String?                 @unique(map: "index_downloads_on_handle") @db.VarChar(255)
  sort1            Int?
  sort2            Int?
  url              String?                 @db.VarChar(255)
  filename_ext     downloads_filename_ext?
  post_parameters  String?                 @db.Text
  created_at       DateTime?               @db.DateTime(0)
  updated_at       DateTime?               @db.DateTime(0)
  last_download_at DateTime?               @db.DateTime(0)
  last_change_at   DateTime?               @db.DateTime(0)
  date_sensitive   Boolean                 @default(false)
  freeze_file      Boolean?
  file_to_extract  String?                 @db.VarChar(255)
  sheet_override   String?                 @db.VarChar(255)
  notes            String?                 @db.Text
}

model dsd_log_entries {
  id          Int       @id @default(autoincrement())
  download_id Int?
  time        DateTime? @db.DateTime(0)
  url         String?   @db.VarChar(255)
  location    String?   @db.VarChar(255)
  status      Int?
  dl_changed  Boolean?
  created_at  DateTime? @db.DateTime(0)
  updated_at  DateTime? @db.DateTime(0)
  mimetype    String?   @db.VarChar(255)
}

model dvw_uploads {
  id            BigInt                     @id @default(autoincrement())
  upload_at     DateTime?                  @db.DateTime(0)
  active        Boolean?
  cats_status   dvw_uploads_cats_status?
  series_status dvw_uploads_series_status?
  filename      String?                    @db.VarChar(255)
  last_error    String?                    @db.VarChar(255)
  last_error_at DateTime?                  @db.DateTime(0)
}

model export_series {
  id         Int  @id @default(autoincrement())
  export_id  Int?
  series_id  Int?
  list_order Int?

  @@unique([export_id, series_id], map: "index_export_series_on_export_id_and_series_id")
  @@index([export_id], map: "index_export_series_on_export_id")
  @@index([series_id], map: "index_export_series_on_series_id")
}

model exports {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar(255)
  created_by Int?
  updated_by Int?
  owned_by   Int?
  created_at DateTime @db.DateTime(0)
  updated_at DateTime @db.DateTime(0)
}

model feature_toggles {
  id          Int                      @id @default(autoincrement())
  universe    feature_toggles_universe @default(UHERO)
  name        String?                  @db.VarChar(255)
  description String?                  @db.VarChar(255)
  status      Boolean?
  created_at  DateTime                 @db.DateTime(0)
  updated_at  DateTime                 @db.DateTime(0)
}

model forecast_snapshots {
  id                        Int      @id @default(autoincrement())
  name                      String?  @db.VarChar(255)
  version                   String?  @db.VarChar(255)
  published                 Boolean?
  created_at                DateTime @db.DateTime(0)
  updated_at                DateTime @db.DateTime(0)
  new_forecast_tsd_filename String?  @db.VarChar(255)
  new_forecast_tsd_label    String?  @db.VarChar(255)
  old_forecast_tsd_filename String?  @db.VarChar(255)
  old_forecast_tsd_label    String?  @db.VarChar(255)
  history_tsd_filename      String?  @db.VarChar(255)
  history_tsd_label         String?  @db.VarChar(255)
  comments                  String?  @db.Text

  @@unique([name, version], map: "index_forecast_snapshots_on_name_and_version")
}

model geo_trees {
  id                                           Int         @id @default(autoincrement())
  parent_id                                    Int
  child_id                                     Int
  geographies_geo_trees_parent_idTogeographies geographies @relation("geo_trees_parent_idTogeographies", fields: [parent_id], references: [id], onUpdate: Restrict, map: "fk_rails_20ee9a0990")
  geographies_geo_trees_child_idTogeographies  geographies @relation("geo_trees_child_idTogeographies", fields: [child_id], references: [id], onUpdate: Restrict, map: "fk_rails_5c6299c1f9")

  @@index([parent_id], map: "fk_rails_20ee9a0990")
  @@index([child_id], map: "fk_rails_5c6299c1f9")
}

model geographies {
  id                                         Int                  @id @default(autoincrement())
  universe                                   geographies_universe @default(UHERO)
  handle                                     String?              @db.VarChar(255)
  display_name                               String?              @db.VarChar(255)
  display_name_short                         String?              @db.VarChar(255)
  fips                                       String?              @db.VarChar(255)
  list_order                                 Int?
  geotype                                    String?              @db.VarChar(255)
  created_at                                 DateTime             @db.DateTime(0)
  updated_at                                 DateTime             @db.DateTime(0)
  categories                                 categories[]
  geo_trees_geo_trees_parent_idTogeographies geo_trees[]          @relation("geo_trees_parent_idTogeographies")
  geo_trees_geo_trees_child_idTogeographies  geo_trees[]          @relation("geo_trees_child_idTogeographies")
  series                                     series[]

  @@unique([universe, handle], map: "index_geographies_on_universe_and_handle")
}

model measurement_series {
  id             Int  @id @default(autoincrement())
  measurement_id Int?
  series_id      Int?

  @@unique([measurement_id, series_id], map: "index_measurement_series_on_measurement_id_and_series_id")
  @@index([measurement_id], map: "index_measurement_series_on_measurement_id")
  @@index([series_id], map: "index_measurement_series_on_series_id")
}

model measurements {
  id                  Int                               @id @default(autoincrement())
  unit_id             Int?
  source_id           Int?
  source_detail_id    Int?
  universe            measurements_universe             @default(UHERO)
  prefix              String                            @db.VarChar(255)
  data_portal_name    String?                           @db.VarChar(255)
  table_prefix        String?                           @db.VarChar(255)
  table_postfix       String?                           @db.VarChar(255)
  frequency_transform String?                           @db.VarChar(255)
  percent             Boolean?
  real                Boolean?
  decimals            Int                               @default(1)
  restricted          Boolean                           @default(false)
  seasonally_adjusted Boolean?
  seasonal_adjustment measurements_seasonal_adjustment?
  source_link         String?                           @db.VarChar(255)
  notes               String?                           @db.VarChar(500)
  created_at          DateTime                          @db.DateTime(0)
  updated_at          DateTime                          @db.DateTime(0)
  units               units?                            @relation(fields: [unit_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_c5bad45aff")
  sources             sources?                          @relation(fields: [source_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_e96addabdb")
  source_details      source_details?                   @relation(fields: [source_detail_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_f4c727584e")

  @@unique([universe, prefix], map: "index_measurements_on_universe_and_prefix")
  @@index([unit_id], map: "fk_rails_c5bad45aff")
  @@index([source_id], map: "fk_rails_e96addabdb")
  @@index([source_detail_id], map: "fk_rails_f4c727584e")
  @@index([universe], map: "index_measurements_on_universe")
}

model new_dbedt_uploads {
  id            BigInt                    @id @default(autoincrement())
  upload_at     DateTime?                 @db.DateTime(0)
  active        Boolean?
  status        new_dbedt_uploads_status?
  filename      String?                   @db.VarChar(255)
  last_error_at DateTime?                 @db.DateTime(0)
  last_error    String?                   @db.VarChar(255)
}

model nta_uploads {
  id              Int                        @id @default(autoincrement())
  upload_at       DateTime?                  @db.DateTime(0)
  active          Boolean?
  cats_status     nta_uploads_cats_status?
  series_status   nta_uploads_series_status?
  series_filename String?                    @db.VarChar(255)
  last_error      String?                    @db.VarChar(255)
  last_error_at   DateTime?                  @db.DateTime(0)
}

model packager_outputs {
  id            Int       @id @default(autoincrement())
  path          String?   @db.VarChar(255)
  last_new_data DateTime? @db.Date
  created_at    DateTime? @db.DateTime(0)
  updated_at    DateTime? @db.DateTime(0)
}

model public_data_points {
  series_id      Int
  date           DateTime @db.Date
  value          Float?
  pseudo_history Boolean  @default(false)
  created_at     DateTime @db.DateTime(0)
  updated_at     DateTime @db.DateTime(0)

  @@id([series_id, date])
}

model reload_job_series {
  reload_job_id BigInt
  series_id     BigInt

  @@id([reload_job_id, series_id])
  @@unique([reload_job_id, series_id], map: "index_reload_job_series_on_reload_job_id_and_series_id")
  @@index([reload_job_id], map: "index_reload_job_series_on_reload_job_id")
  @@index([series_id], map: "index_reload_job_series_on_series_id")
}

model reload_jobs {
  id            BigInt              @id @default(autoincrement())
  user_id       BigInt?
  created_at    DateTime            @db.DateTime(0)
  status        reload_jobs_status?
  finished_at   DateTime?           @db.DateTime(0)
  params        String?             @db.VarChar(255)
  update_public Boolean             @default(false)
  error         String?             @db.VarChar(255)

  @@index([user_id], map: "index_reload_jobs_on_user_id")
}

model schema_migrations {
  version String @unique(map: "unique_schema_migrations") @db.VarChar(255)
}

model series {
  id                                        Int                   @id @default(autoincrement())
  xseries_id                                Int
  geography_id                              Int?
  unit_id                                   Int?
  source_id                                 Int?
  source_detail_id                          Int?
  universe                                  series_universe       @default(UHERO)
  decimals                                  Int                   @default(1)
  name                                      String?               @db.VarChar(255)
  dataPortalName                            String?               @db.VarChar(255)
  description                               String?               @db.VarChar(500)
  created_at                                DateTime?             @db.DateTime(0)
  updated_at                                DateTime?             @db.DateTime(0)
  dependency_depth                          Int?                  @default(0)
  source_link                               String?               @db.VarChar(255)
  investigation_notes                       String?               @db.VarChar(500)
  scratch                                   Int                   @default(0)
  data_source_actions                       data_source_actions[]
  units                                     units?                @relation(fields: [unit_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_1961e72b74")
  source_details                            source_details?       @relation(fields: [source_detail_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_36c9ba7209")
  sources                                   sources?              @relation(fields: [source_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_6f2f66e327")
  geographies                               geographies?          @relation(fields: [geography_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_963076a967")
  xseries_series_xseries_idToxseries        xseries               @relation("series_xseries_idToxseries", fields: [xseries_id], references: [id], onUpdate: Restrict, map: "fk_rails_b3202f6d25")
  xseries_xseries_primary_series_idToseries xseries[]             @relation("xseries_primary_series_idToseries")

  @@unique([universe, name], map: "index_series_on_universe_and_name")
  @@unique([universe, xseries_id], map: "index_series_on_universe_and_xseries_id")
  @@index([unit_id], map: "fk_rails_1961e72b74")
  @@index([source_detail_id], map: "fk_rails_36c9ba7209")
  @@index([source_id], map: "fk_rails_6f2f66e327")
  @@index([geography_id], map: "fk_rails_963076a967")
  @@index([xseries_id], map: "fk_rails_b3202f6d25")
  @@index([name], map: "index_series_on_name")
  @@index([universe], map: "index_series_on_universe")
  @@index([universe, xseries_id, id], map: "series_univ_x_id")
  @@fulltext([name, dataPortalName], map: "name_data_portal_name_description")
}

model series_reload_logs {
  batch_id   String    @db.VarChar(255)
  series_id  Int
  depth      Int?
  job_id     String?   @db.VarChar(255)
  status     String?   @db.VarChar(255)
  created_at DateTime? @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)

  @@id([batch_id, series_id])
}

model source_details {
  id           Int                     @id @default(autoincrement())
  universe     source_details_universe @default(UHERO)
  created_at   DateTime                @db.DateTime(0)
  updated_at   DateTime                @db.DateTime(0)
  description  String?                 @db.VarChar(1000)
  measurements measurements[]
  series       series[]

  @@index([universe], map: "index_source_details_on_universe")
}

model sources {
  id           Int              @id @default(autoincrement())
  universe     sources_universe @default(UHERO)
  description  String?          @db.VarChar(255)
  link         String?          @db.VarChar(255)
  created_at   DateTime         @db.DateTime(0)
  updated_at   DateTime         @db.DateTime(0)
  measurements measurements[]
  series       series[]

  @@index([universe], map: "index_sources_on_universe")
}

model tsd_files {
  id                   Int      @id @default(autoincrement())
  forecast_snapshot_id Int?
  filename             String?  @db.VarChar(255)
  latest_forecast      Boolean?
  created_at           DateTime @db.DateTime(0)
  updated_at           DateTime @db.DateTime(0)
}

model units {
  id           Int            @id @default(autoincrement())
  universe     units_universe @default(UHERO)
  short_label  String?        @db.VarChar(255)
  long_label   String?        @db.VarChar(255)
  created_at   DateTime       @db.DateTime(0)
  updated_at   DateTime       @db.DateTime(0)
  measurements measurements[]
  series       series[]

  @@unique([universe, short_label, long_label], map: "index_units_on_universe_and_short_label_and_long_label")
}

model user_series {
  user_id   BigInt
  series_id BigInt

  @@id([user_id, series_id])
  @@unique([user_id, series_id], map: "index_user_series_on_user_id_and_series_id")
  @@index([series_id], map: "index_user_series_on_series_id")
  @@index([user_id], map: "index_user_series_on_user_id")
}

model users {
  id                     Int            @id @default(autoincrement())
  universe               users_universe @default(UHERO)
  role                   users_role     @default(external)
  mnemo_search           Boolean        @default(false)
  email                  String         @unique(map: "index_users_on_email") @default("") @db.VarChar(255)
  encrypted_password     String         @default("") @db.VarChar(128)
  password_salt          String?        @default("") @db.VarChar(255)
  reset_password_token   String?        @unique(map: "index_users_on_reset_password_token") @db.VarChar(255)
  remember_token         String?        @db.VarChar(255)
  remember_created_at    DateTime?      @db.DateTime(0)
  sign_in_count          Int?           @default(0)
  current_sign_in_at     DateTime?      @db.DateTime(0)
  last_sign_in_at        DateTime?      @db.DateTime(0)
  current_sign_in_ip     String?        @db.VarChar(255)
  last_sign_in_ip        String?        @db.VarChar(255)
  created_at             DateTime?      @db.DateTime(0)
  updated_at             DateTime?      @db.DateTime(0)
  reset_password_sent_at DateTime?      @db.DateTime(0)
  // authorizations         authorizations[] @ignore TO BE REMOVED

  @@index([universe], map: "index_users_on_universe")
}

model xseries {
  id                                       Int                          @id @default(autoincrement())
  primary_series_id                        Int?
  restricted                               Boolean                      @default(false)
  quarantined                              Boolean?                     @default(false)
  frequency                                String?                      @db.VarChar(255)
  seasonally_adjusted                      Boolean?
  seasonal_adjustment                      xseries_seasonal_adjustment?
  aremos_missing                           Int?
  aremos_diff                              Float?                       @db.Float
  mult                                     Int?
  created_at                               DateTime?                    @db.DateTime(0)
  updated_at                               DateTime?                    @db.DateTime(0)
  units                                    Int                          @default(1)
  percent                                  Boolean?
  real                                     Boolean?
  base_year                                Int?
  frequency_transform                      String?                      @db.VarChar(255)
  last_demetra_date                        DateTime?                    @db.Date
  last_demetra_datestring                  String?                      @db.VarChar(255)
  factor_application                       String?                      @db.VarChar(255)
  factors                                  String?                      @db.Text
  series_series_xseries_idToxseries        series[]                     @relation("series_xseries_idToxseries")
  series_xseries_primary_series_idToseries series?                      @relation("xseries_primary_series_idToseries", fields: [primary_series_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_rails_4d09425f97")

  @@index([primary_series_id], map: "fk_rails_4d09425f97")
  @@index([quarantined, id], map: "xseries_quar_id")
}

enum units_universe {
  UHERO
  FC
  DBEDT
  NTA
  COH
  CCOM
}

enum feature_toggles_universe {
  UHERO
  FC
  DBEDT
  NTA
  COH
  CCOM
}

enum source_details_universe {
  UHERO
  DBEDT
  NTA
  COH
  CCOM
}

enum users_universe {
  UHERO
  DBEDT
  NTA
  COH
  CCOM
}

enum api_applications_universe {
  UHERO
  DBEDT
  NTA
  COH
  CCOM
}

enum data_lists_universe {
  UHERO
  FC
  DBEDT
  NTA
  COH
  CCOM
}

enum geographies_universe {
  UHERO
  FC
  DBEDT
  NTA
  COH
  CCOM
}

enum sources_universe {
  UHERO
  DBEDT
  NTA
  COH
  CCOM
}

enum users_role {
  external
  fsonly
  internal
  admin
  dev
}

enum new_dbedt_uploads_status {
  processing
  ok
  fail
}

enum categories_universe {
  UHERO
  FC
  DBEDT
  NTA
  COH
  CCOM
}

enum dbedt_uploads_cats_status {
  processing
  ok
  fail
}

enum data_sources_universe {
  UHERO
  FC
  DBEDT
  NTA
  COH
  CCOM
}

enum reload_jobs_status {
  processing
  done
  fail
}

enum dvw_uploads_cats_status {
  processing
  ok
  fail
}

enum nta_uploads_cats_status {
  processing
  ok
  fail
}

enum dbedt_uploads_series_status {
  processing
  ok
  fail
}

enum dvw_uploads_series_status {
  processing
  ok
  fail
}

enum data_list_measurements_indent {
  indent0
  indent1
  indent2
  indent3
}

enum measurements_universe {
  UHERO
  FC
  DBEDT
  NTA
  COH
  CCOM
}

enum nta_uploads_series_status {
  processing
  ok
  fail
}

enum downloads_filename_ext {
  xlsx
  xls
  zip
  csv
  txt
  pdf
}

enum xseries_seasonal_adjustment {
  seasonally_adjusted
  not_seasonally_adjusted
  not_applicable
}

enum series_universe {
  UHERO
  FC
  DBEDT
  NTA
  COH
  CCOM
}

enum categories_default_freq {
  A
  S
  Q
  M
  W
  D
}

enum measurements_seasonal_adjustment {
  seasonally_adjusted
  not_seasonally_adjusted
  not_applicable
}

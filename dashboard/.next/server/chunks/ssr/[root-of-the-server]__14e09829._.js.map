{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/lib/types.ts"],"sourcesContent":["export type ActionResult<T> =\n  | { error: null; data: T }\n  | { error: string; data: null; statusCode?: number };\n\nexport const createActionResult = {\n  success: <T>(data: T): ActionResult<T> => ({ error: null, data }),\n  error: <T>(error: string, statusCode?: number): ActionResult<T> => ({\n    error,\n    data: null,\n    statusCode,\n  }),\n};\n"],"names":[],"mappings":";;;;AAIO,MAAM,qBAAqB;IAChC,SAAS,CAAI,OAA6B,CAAC;YAAE,OAAO;YAAM;QAAK,CAAC;IAChE,OAAO,CAAI,OAAe,aAAyC,CAAC;YAClE;YACA,MAAM;YACN;QACF,CAAC;AACH","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/lib/action-utils.ts"],"sourcesContent":["\"use server\";\n\nimport { ActionResult, createActionResult } from \"./types\";\n\nexport async function withErrorHandling<T>(\n  action: () => Promise<T>\n): Promise<ActionResult<T>> {\n  try {\n    const result = await action();\n    return createActionResult.success(result);\n  } catch (error) {\n    console.error(\"Server action error:\", error);\n\n    // Can add error types more as needed\n    if (error instanceof Error) {\n      if (error.message.includes(\"404\")) {\n        return createActionResult.error(\"Resource not found\", 404);\n      }\n      if (error.message.includes(\"400\")) {\n        return createActionResult.error(error.message, 400);\n      }\n    }\n\n    return createActionResult.error(\n      \"Something went wrong. Please try again later.\"\n    );\n  }\n}\n\nexport async function apiRequest<T>(\n  endpoint: string,\n  options?: RequestInit\n): Promise<T> {\n  const response = await fetch(\n    `${process.env.API_BASE_URL || \"http://127.0.0.1:3001\"}${endpoint}`,\n    {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers,\n      },\n      ...options,\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    const error = new Error(data.error?.message || \"API request failed\");\n    error.name = `${response.status}`;\n    throw error;\n  }\n\n  return data;\n}\n"],"names":[],"mappings":";;;;;;;AAEA;;;;AAEO,eAAe,kBACpB,MAAwB;IAExB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,OAAO,yJAAkB,CAAC,OAAO,CAAC;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QAEtC,qCAAqC;QACrC,IAAI,iBAAiB,OAAO;YAC1B,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ;gBACjC,OAAO,yJAAkB,CAAC,KAAK,CAAC,sBAAsB;YACxD;YACA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ;gBACjC,OAAO,yJAAkB,CAAC,KAAK,CAAC,MAAM,OAAO,EAAE;YACjD;QACF;QAEA,OAAO,yJAAkB,CAAC,KAAK,CAC7B;IAEJ;AACF;AAEO,eAAe,WACpB,QAAgB,EAChB,OAAqB;IAErB,MAAM,WAAW,MAAM,MACrB,GAAG,QAAQ,GAAG,CAAC,YAAY,IAAI,0BAA0B,UAAU,EACnE;QACE,SAAS;YACP,gBAAgB;YAChB,GAAG,SAAS,OAAO;QACrB;QACA,GAAG,OAAO;IACZ;IAEF,MAAM,OAAO,MAAM,SAAS,IAAI;IAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,QAAQ,IAAI,MAAM,KAAK,KAAK,EAAE,WAAW;QAC/C,MAAM,IAAI,GAAG,GAAG,SAAS,MAAM,EAAE;QACjC,MAAM;IACR;IAEA,OAAO;AACT;;;IAhDsB;IAyBA;;AAzBA,yPAAA;AAyBA,yPAAA","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/actions/series-actions.ts"],"sourcesContent":["\"use server\";\n\nimport type { measurements, series } from \"@prisma/client\";\nimport { DataLoader, DataPoints, SeriesMetadata } from \"@shared/types/shared\";\nimport { apiRequest, withErrorHandling } from \"lib/action-utils\";\nimport { ActionResult } from \"lib/types\";\n\nexport async function getSeries(): Promise<ActionResult<series[]>> {\n  return withErrorHandling(async () => {\n    const response = await apiRequest<{\n      data: series[];\n      meta: {\n        offset: number;\n        limit: number;\n        count: number;\n      };\n    }>(\"/series\");\n    return response.data;\n  });\n}\n\nexport async function getSeriesById(id: number) {\n  return withErrorHandling(async () => {\n    const response = await apiRequest<{\n      data: {\n        metadata: SeriesMetadata;\n        dataPoints: DataPoints[];\n        measurement: measurements[];\n        loaders: DataLoader[];\n      };\n    }>(`/series/${id}`);\n    return response.data;\n  });\n}\n\nexport async function createSeries(formData: FormData) {\n  return withErrorHandling(async () => {\n    const seriesData = {\n      name: formData.get(\"name\") as string,\n      dataPortalName: formData.get(\"dataPortalName\") as string,\n      // ... other fields\n    };\n\n    const response = await apiRequest<{\n      data: series;\n    }>(\"/series\", {\n      method: \"POST\",\n      body: JSON.stringify(seriesData),\n    });\n\n    return response.data;\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;AAIA;;;;AAGO,eAAe;IACpB,OAAO,IAAA,kKAAiB,EAAC;QACvB,MAAM,WAAW,MAAM,IAAA,2JAAU,EAO9B;QACH,OAAO,SAAS,IAAI;IACtB;AACF;AAEO,eAAe,cAAc,EAAU;IAC5C,OAAO,IAAA,kKAAiB,EAAC;QACvB,MAAM,WAAW,MAAM,IAAA,2JAAU,EAO9B,CAAC,QAAQ,EAAE,IAAI;QAClB,OAAO,SAAS,IAAI;IACtB;AACF;AAEO,eAAe,aAAa,QAAkB;IACnD,OAAO,IAAA,kKAAiB,EAAC;QACvB,MAAM,aAAa;YACjB,MAAM,SAAS,GAAG,CAAC;YACnB,gBAAgB,SAAS,GAAG,CAAC;QAE/B;QAEA,MAAM,WAAW,MAAM,IAAA,2JAAU,EAE9B,WAAW;YACZ,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,OAAO,SAAS,IAAI;IACtB;AACF;;;IA7CsB;IAcA;IAcA;;AA5BA,yPAAA;AAcA,yPAAA;AAcA,yPAAA","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/.next-internal/server/app/%28udaman%29/series/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getSeries as '00daf7f8e5e08116e53170ae0e1bc699ae6b1aa9ee'} from 'ACTIONS_MODULE0'\nexport {createSeries as '4054ab57a26841b7235b68e5b6ba4ca77c523100e2'} from 'ACTIONS_MODULE0'\nexport {getSeriesById as '40a253856b9a2c01be05307e447371b3d7e0c466ad'} from 'ACTIONS_MODULE0'\nexport {withErrorHandling as '407e64a257b0bea183b550c12178e1be47be27e200'} from 'ACTIONS_MODULE1'\nexport {apiRequest as '6007855f4aaf71eccf29dd5056ef7b747977cc4606'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAGA","debugId":null}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/shared/utils/time.ts"],"sourcesContent":["import { data_points } from \"@prisma/client\";\nimport {\n  addMonths,\n  addQuarters,\n  addYears,\n  differenceInDays,\n  format,\n  isAfter,\n  startOfMonth,\n  startOfQuarter,\n  startOfYear,\n} from \"date-fns\";\n\n/* Functions for generating date lists for use in tables, charts, etc. Initially used in CPI-RPP portal */\n\nfunction generateDates(\n  startDate: Date,\n  endDate: Date,\n  frequency: string, // \"M\" | \"Q\" | \"A\"\n  formatString?: string\n): string[] {\n  if (\n    !startDate ||\n    !endDate ||\n    isNaN(startDate.getTime()) ||\n    isNaN(endDate.getTime())\n  ) {\n    throw new Error(\"generateDates: invalid dates passed as arguments\");\n  }\n\n  if (isAfter(startDate, endDate)) {\n    throw new Error(\n      \"generateDates: startDate must be before or equal to endDate\"\n    );\n  }\n\n  switch (frequency) {\n    case \"M\":\n      return generateMonths(startDate, endDate, formatString);\n    case \"Q\":\n      return generateQuarters(startDate, endDate, formatString);\n    case \"A\":\n      return generateYears(startDate, endDate, formatString);\n    default:\n      return generateMonths(startDate, endDate, formatString);\n  }\n}\n\nfunction generateMonths(\n  startDate: Date,\n  endDate: Date,\n  formatString: string = \"yyyy-MM\"\n): string[] {\n  const months: string[] = [];\n  let current = startOfMonth(startDate);\n  const end = startOfMonth(endDate);\n\n  while (!isAfter(current, end)) {\n    months.push(format(current, formatString));\n    current = addMonths(current, 1);\n  }\n\n  return months;\n}\n\nfunction generateQuarters(\n  startDate: Date,\n  endDate: Date,\n  formatString: string = \"yyyy-'Q'Q\"\n): string[] {\n  const quarters: string[] = [];\n  let current = startOfQuarter(startDate);\n  const end = startOfQuarter(endDate);\n\n  while (!isAfter(current, end)) {\n    quarters.push(format(current, formatString));\n    current = addQuarters(current, 1);\n  }\n\n  return quarters;\n}\n\nfunction generateYears(\n  startDate: Date,\n  endDate: Date,\n  formatString: string = \"yyyy\"\n): string[] {\n  const years: string[] = [];\n  let current = startOfYear(startDate);\n  const end = startOfYear(endDate);\n\n  while (!isAfter(current, end)) {\n    years.push(format(current, formatString));\n    current = addYears(current, 1);\n  }\n\n  return years;\n}\n\n/** Try to keep display formats consistent across all systems */\nconst uheroDate = (date: Date, freq?: string) => {\n  switch (freq) {\n    case \"M\":\n      return format(date, \"MMM yyyy\");\n    case \"Q\":\n      return format(date, \"yyyy QQQ\");\n    case \"A\":\n      return format(date, \"yyyy\");\n    default:\n      return format(date, \"yyyy-MM-dd\");\n  }\n};\n\n/** Generates the age field in series table. Taken from JP's ruby version. Unsure why\n * they settled on the 100 day and 10 month intervals.\n */\nfunction dpAgeCode(updatedAt: string, pseudoHistory: boolean) {\n  const now = new Date();\n  const createdAt = new Date(updatedAt);\n  const days = differenceInDays(now, createdAt);\n  const months = Math.round(days / 30.0);\n\n  const prefix = pseudoHistory ? \"*\" : \"\";\n\n  let ageCode;\n  if (days < 100) {\n    ageCode = days.toString().padStart(2, \"0\");\n  } else if (months < 10) {\n    ageCode = `${months}m`;\n  } else {\n    let years = days / 365.0;\n    years = years % 1 < 0.8 ? Math.floor(years) : Math.floor(years) + 1;\n    years = years === 0 ? 1 : years;\n    ageCode = `${years}y`;\n  }\n\n  return prefix + ageCode;\n}\n\nfunction formatRuntime(runtimeSeconds: number | null): string {\n  if (runtimeSeconds === null) return \"-\";\n  return `${runtimeSeconds.toFixed(2)}s`;\n}\n\nexport { generateDates, uheroDate, dpAgeCode, formatRuntime };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex cursor-default flex-col gap-2 py-2 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-2 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-2 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardAction,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EACX,kFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EACX,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EACX,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EAAC,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EAAC,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/ui/menubar.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Menubar = registerClientReference(\n    function() { throw new Error(\"Attempted to call Menubar() from the server but Menubar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"Menubar\",\n);\nexport const MenubarCheckboxItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarCheckboxItem() from the server but MenubarCheckboxItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarCheckboxItem\",\n);\nexport const MenubarContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarContent() from the server but MenubarContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarContent\",\n);\nexport const MenubarGroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarGroup() from the server but MenubarGroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarGroup\",\n);\nexport const MenubarItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarItem() from the server but MenubarItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarItem\",\n);\nexport const MenubarLabel = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarLabel() from the server but MenubarLabel is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarLabel\",\n);\nexport const MenubarMenu = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarMenu() from the server but MenubarMenu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarMenu\",\n);\nexport const MenubarPortal = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarPortal() from the server but MenubarPortal is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarPortal\",\n);\nexport const MenubarRadioGroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarRadioGroup() from the server but MenubarRadioGroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarRadioGroup\",\n);\nexport const MenubarRadioItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarRadioItem() from the server but MenubarRadioItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarRadioItem\",\n);\nexport const MenubarSeparator = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarSeparator() from the server but MenubarSeparator is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarSeparator\",\n);\nexport const MenubarShortcut = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarShortcut() from the server but MenubarShortcut is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarShortcut\",\n);\nexport const MenubarSub = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarSub() from the server but MenubarSub is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarSub\",\n);\nexport const MenubarSubContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarSubContent() from the server but MenubarSubContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarSubContent\",\n);\nexport const MenubarSubTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarSubTrigger() from the server but MenubarSubTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarSubTrigger\",\n);\nexport const MenubarTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarTrigger() from the server but MenubarTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx <module evaluation>\",\n    \"MenubarTrigger\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACvE;;AACO,MAAM,UAAU,IAAA,kRAAuB,EAC1C;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,4EACA;AAEG,MAAM,sBAAsB,IAAA,kRAAuB,EACtD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,4EACA;AAEG,MAAM,iBAAiB,IAAA,kRAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,4EACA;AAEG,MAAM,eAAe,IAAA,kRAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,4EACA;AAEG,MAAM,cAAc,IAAA,kRAAuB,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,4EACA;AAEG,MAAM,eAAe,IAAA,kRAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,4EACA;AAEG,MAAM,cAAc,IAAA,kRAAuB,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,4EACA;AAEG,MAAM,gBAAgB,IAAA,kRAAuB,EAChD;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,4EACA;AAEG,MAAM,oBAAoB,IAAA,kRAAuB,EACpD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,4EACA;AAEG,MAAM,mBAAmB,IAAA,kRAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,4EACA;AAEG,MAAM,mBAAmB,IAAA,kRAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,4EACA;AAEG,MAAM,kBAAkB,IAAA,kRAAuB,EAClD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,4EACA;AAEG,MAAM,aAAa,IAAA,kRAAuB,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,4EACA;AAEG,MAAM,oBAAoB,IAAA,kRAAuB,EACpD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,4EACA;AAEG,MAAM,oBAAoB,IAAA,kRAAuB,EACpD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,4EACA;AAEG,MAAM,iBAAiB,IAAA,kRAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,4EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/ui/menubar.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Menubar = registerClientReference(\n    function() { throw new Error(\"Attempted to call Menubar() from the server but Menubar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"Menubar\",\n);\nexport const MenubarCheckboxItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarCheckboxItem() from the server but MenubarCheckboxItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarCheckboxItem\",\n);\nexport const MenubarContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarContent() from the server but MenubarContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarContent\",\n);\nexport const MenubarGroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarGroup() from the server but MenubarGroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarGroup\",\n);\nexport const MenubarItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarItem() from the server but MenubarItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarItem\",\n);\nexport const MenubarLabel = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarLabel() from the server but MenubarLabel is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarLabel\",\n);\nexport const MenubarMenu = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarMenu() from the server but MenubarMenu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarMenu\",\n);\nexport const MenubarPortal = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarPortal() from the server but MenubarPortal is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarPortal\",\n);\nexport const MenubarRadioGroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarRadioGroup() from the server but MenubarRadioGroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarRadioGroup\",\n);\nexport const MenubarRadioItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarRadioItem() from the server but MenubarRadioItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarRadioItem\",\n);\nexport const MenubarSeparator = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarSeparator() from the server but MenubarSeparator is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarSeparator\",\n);\nexport const MenubarShortcut = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarShortcut() from the server but MenubarShortcut is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarShortcut\",\n);\nexport const MenubarSub = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarSub() from the server but MenubarSub is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarSub\",\n);\nexport const MenubarSubContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarSubContent() from the server but MenubarSubContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarSubContent\",\n);\nexport const MenubarSubTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarSubTrigger() from the server but MenubarSubTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarSubTrigger\",\n);\nexport const MenubarTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call MenubarTrigger() from the server but MenubarTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/ui/menubar.tsx\",\n    \"MenubarTrigger\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACvE;;AACO,MAAM,UAAU,IAAA,kRAAuB,EAC1C;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,wDACA;AAEG,MAAM,sBAAsB,IAAA,kRAAuB,EACtD;IAAa,MAAM,IAAI,MAAM;AAAsP,GACnR,wDACA;AAEG,MAAM,iBAAiB,IAAA,kRAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,wDACA;AAEG,MAAM,eAAe,IAAA,kRAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,wDACA;AAEG,MAAM,cAAc,IAAA,kRAAuB,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,wDACA;AAEG,MAAM,eAAe,IAAA,kRAAuB,EAC/C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,wDACA;AAEG,MAAM,cAAc,IAAA,kRAAuB,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,wDACA;AAEG,MAAM,gBAAgB,IAAA,kRAAuB,EAChD;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,wDACA;AAEG,MAAM,oBAAoB,IAAA,kRAAuB,EACpD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,wDACA;AAEG,MAAM,mBAAmB,IAAA,kRAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,wDACA;AAEG,MAAM,mBAAmB,IAAA,kRAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,wDACA;AAEG,MAAM,kBAAkB,IAAA,kRAAuB,EAClD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,wDACA;AAEG,MAAM,aAAa,IAAA,kRAAuB,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,wDACA;AAEG,MAAM,oBAAoB,IAAA,kRAAuB,EACpD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,wDACA;AAEG,MAAM,oBAAoB,IAAA,kRAAuB,EACpD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,wDACA;AAEG,MAAM,iBAAiB,IAAA,kRAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,wDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 563, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 571, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/series/data-loader.tsx"],"sourcesContent":["import { DataLoader } from \"@shared/types/shared\";\nimport { formatRuntime, uheroDate } from \"@shared/utils/time\";\nimport { format } from \"date-fns\";\nimport { Clock10, ClockPlus } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  Card,\n  CardAction,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n} from \"@/components/ui/card\";\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarTrigger,\n} from \"@/components/ui/menubar\";\n\nimport { Button } from \"../ui/button\";\nimport { Separator } from \"../ui/separator\";\n\nexport const LoaderSection = ({\n  seriesId,\n  loaders,\n}: {\n  seriesId: number;\n  loaders: DataLoader[];\n}) => {\n  //   console.log(\"LoaderSection\", loaders);\n  return (\n    <div className=\"flex flex-col border-b\">\n      <div className=\"flex h-6 flex-row items-center justify-start border-b pb-2 font-semibold\">\n        <span className=\"mr-4\">Loaders</span>\n        <Button variant={\"link\"}>new</Button>\n        <Separator orientation=\"vertical\" className=\"bg-primary/60 h-4\" />\n        <Button variant={\"link\"}>clear data</Button>\n        <Separator orientation=\"vertical\" className=\"bg-primary/60 h-4\" />\n        <Button variant={\"link\"}>load all</Button>\n      </div>\n\n      {loaders.map((l, i) => (\n        <LoaderItem key={`data-loader-${i}`} loader={l} />\n      ))}\n    </div>\n  );\n};\n\nconst LoaderItem = ({ loader }: { loader: DataLoader }) => {\n  const lastRunDate =\n    loader.last_run_at !== null ? uheroDate(loader.last_run_at) : \"-\";\n  const lastRunTime =\n    loader.last_run_at !== null ? format(loader.last_run_at, \"HH:MM\") : \"-\";\n  const runtime = formatRuntime(loader.runtime);\n  return (\n    <Card className={cn(\"p-2\", getColor(loader.color))}>\n      <CardContent className=\"flex h-6 items-center justify-between gap-x-2\">\n        <CardAction className=\"flex items-center\">\n          <span className=\"text-primary/90 mr-2 font-semibold\">\n            {loader.id}\n          </span>\n          <Button\n            variant={\"ghost\"}\n            size={\"icon\"}\n            title=\"Toggle nightly load\"\n            className=\"size-6\"\n          >\n            {loader.reload_nightly ? (\n              <Clock10 className=\"stroke-primary\" />\n            ) : (\n              <ClockPlus className=\"stroke-primary/50\" />\n            )}\n          </Button>\n        </CardAction>\n        {/* <CardDescription title=\"Load Priority\" className=\"mr-auto text-lg\">\n          {loader.priority}\n        </CardDescription> */}\n        <LoaderActionMenu loader={loader} />\n        {/* <CardAction>\n          <Button\n            title=\"load data points\"\n            variant=\"link\"\n            size=\"sm\"\n            className=\"h-6\"\n          >\n            load\n          </Button>\n        </CardAction>\n        <Separator orientation=\"vertical\" className=\"bg-primary/60 w-4\" />\n        <CardAction>\n          <Button\n            title=\"clear datapoints\"\n            variant=\"link\"\n            size=\"sm\"\n            className=\"h-6\"\n          >\n            clear\n          </Button>\n        </CardAction>\n        <Separator orientation=\"vertical\" className=\"bg-primary/60 w-4\" />\n        <CardAction>\n          <Button\n            title=\"delete data loader\"\n            variant=\"link\"\n            size=\"sm\"\n            className=\"h-6\"\n          >\n            delete\n          </Button>\n        </CardAction>\n        <Separator orientation=\"vertical\" className=\"bg-primary/60 w-4\" />\n        <CardAction>\n          <Button\n            title=\"disable data loader\"\n            variant=\"link\"\n            size=\"sm\"\n            className=\"h-6\"\n          >\n            disable\n          </Button>\n        </CardAction>\n        <Separator orientation=\"vertical\" className=\"bg-primary/60 w-4\" />\n        <CardAction>\n          <Button\n            title=\"edit data loader\"\n            variant=\"link\"\n            size=\"sm\"\n            className=\"h-6\"\n            asChild\n          >\n            <Link href={`/data-loaders/edit/${loader.id}`}>edit</Link>\n          </Button>\n        </CardAction> */}\n      </CardContent>\n      <CardHeader>\n        {/* <CardTitle className=\"flex items-center\">\n          <span className=\"text-primary/90 mr-2 text-lg font-semibold\">\n            {loader.id}\n          </span>\n          <Button variant={\"ghost\"} size={\"icon\"} title=\"Toggle nightly load\">\n            {loader.reload_nightly ? (\n              <Clock10 className=\"stroke-primary\" />\n            ) : (\n              <ClockPlus className=\"stroke-primary/50\" />\n            )}\n          </Button>\n        </CardTitle> */}\n        <CardDescription className=\"text-primary\">\n          {loader.description}\n        </CardDescription>\n        <CardDescription className=\"text-primary text-pretty wrap-break-word\">\n          {loader.eval}\n        </CardDescription>\n      </CardHeader>\n\n      <CardFooter className=\"flex flex-row justify-start gap-x-4 text-xs\">\n        <span className=\"text-primary/70 font-normal\">{loader.priority}</span>\n        <span className=\"text-primary/70 font-normal\">{`last run: ${lastRunDate} ${lastRunTime}`}</span>\n        <span className=\"text-primary/70 font-normal\">{`duration: ${runtime}`}</span>\n        <span\n          className={cn(\n            \"ml-auto\",\n            parseInt(loader.scale) === 1 && \"text-primary/60\"\n          )}\n        >{`scale: ${loader.scale}`}</span>\n      </CardFooter>\n    </Card>\n    // <div className={cn(\"p-2\", getColor(loader.color))}>\n    //   <div className=\"flex flex-row items-center justify-evenly\">\n    //     <div className=\"flex\">\n    //       <span className=\"text-left text-xs font-light\">{lastRunDate}</span>\n    //       <span className=\"text-primary/80 text-xs\">{lastRunTime}</span>\n    //     </div>\n    //     <span className=\"text-primary/80 text-sm\">({loader.priority})</span>\n    //     {actions.map((m, i) => (\n    //       <div key={`load-stmt-action-${i}`}>\n    //         <Link href={m.url} className=\"text-sm\">\n    //           {m.action}\n    //         </Link>\n    //         {i !== actions.length - 1 ? <span className=\"text-sm\">|</span> : \"\"}\n    //       </div>\n    //     ))}\n    //   </div>\n    //   <div className=\"flex items-center justify-between\">\n    //     <div className=\"my-3 flex py-2 font-semibold\">\n    //    {\" \"}\n    //     </div>\n\n    //     <span className=\"w-18 text-left text-xs font-light tracking-tighter\">\n    //       ({runtime})\n    //     </span>\n    //     <div>\n    //       <span className=\"font-semibold\">Scale:</span> {loader.scale}\n    //     </div>\n    //   </div>\n\n    //   <div>\n    //     <p className=\"text-xs\">{loader.description}</p>\n    //     <p className=\"text-xs\">{loader.eval}</p>\n    //   </div>\n    // </div>\n  );\n};\n\nconst LoaderActionMenu = ({ loader }: { loader: DataLoader }) => (\n  <Menubar>\n    <MenubarMenu>\n      <MenubarTrigger>File</MenubarTrigger>\n      <MenubarContent>\n        <MenubarItem>\n          New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n        </MenubarItem>\n        <MenubarItem>New Window</MenubarItem>\n        <MenubarSeparator />\n        <MenubarItem>Share</MenubarItem>\n        <MenubarSeparator />\n        <MenubarItem>Print</MenubarItem>\n      </MenubarContent>\n    </MenubarMenu>\n  </Menubar>\n);\n\n/* Tailwind requires colors be named somewhere in the codebase in order to use so using\nthis implementation to get started, may switch to using hex codes as keys to tailwind \ncolors for better colors. */\nconst getColor = (color: string | null) => {\n  if (color === null) return \"bg-muted\";\n  const colors: Record<string, string> = {\n    // Purples\n    B2A1EA: \"bg-[#B2A1EA]\",\n    CDC8FE: \"bg-[#CDC8FE]\",\n    A885EF: \"bg-[#A885EF]\",\n    // Oranges\n    FFA94E: \"bg-[#FFA94E]\",\n    FFA500: \"bg-[#FFA500]\",\n    // blues\n    A9BEF2: \"bg-[#A9BEF2]\",\n    C3DDF9: \"bg-[#C3DDF9]\",\n    \"6495ED\": \"bg-[#6495ED]\",\n    // yellow\n    F9FF8B: \"bg-[#F9FF8B]\",\n    FBFFBD: \"bg-[#FBFFBD]\",\n    F0E67F: \"bg-[#F0E67F]\",\n    // browns\n    CAAF8C: \"bg-[#CAAF8C]\",\n    DFC3AA: \"bg-[#DFC3AA]\",\n    B78E5C: \"bg-[#B78E5C]\",\n    // salmon:\n    FEB4AA: \"bg-[#FEB4AA]\",\n    // greens:\n    \"9FDD8C\": \"bg-[#9FDD8C]\",\n    D0F0C0: \"bg-[#D0F0C0]\",\n    \"88D3B2\": \"bg-[#88D3B2]\",\n    \"74C365\": \"bg-[#74C365]\",\n  };\n  return colors[color];\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 919, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/series/tables.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const MetaDataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call MetaDataTable() from the server but MetaDataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx <module evaluation>\",\n    \"MetaDataTable\",\n);\nexport const SeriesDataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call SeriesDataTable() from the server but SeriesDataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx <module evaluation>\",\n    \"SeriesDataTable\",\n);\nexport const SeriesSummaryTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call SeriesSummaryTable() from the server but SeriesSummaryTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx <module evaluation>\",\n    \"SeriesSummaryTable\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;;;AACvE;;AACO,MAAM,gBAAgB,IAAA,kRAAuB,EAChD;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,+EACA;AAEG,MAAM,kBAAkB,IAAA,kRAAuB,EAClD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,+EACA;AAEG,MAAM,qBAAqB,IAAA,kRAAuB,EACrD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,+EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 943, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/series/tables.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const MetaDataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call MetaDataTable() from the server but MetaDataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx\",\n    \"MetaDataTable\",\n);\nexport const SeriesDataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call SeriesDataTable() from the server but SeriesDataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx\",\n    \"SeriesDataTable\",\n);\nexport const SeriesSummaryTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call SeriesSummaryTable() from the server but SeriesSummaryTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx\",\n    \"SeriesSummaryTable\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;;;AACvE;;AACO,MAAM,gBAAgB,IAAA,kRAAuB,EAChD;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,2DACA;AAEG,MAAM,kBAAkB,IAAA,kRAAuB,EAClD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,2DACA;AAEG,MAAM,qBAAqB,IAAA,kRAAuB,EACrD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,2DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 967, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 975, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/app/%28udaman%29/series/%5Bid%5D/page.tsx"],"sourcesContent":["import { notFound } from \"next/navigation\";\nimport { getSeriesById } from \"@/actions/series-actions\";\n\nimport { LoaderSection } from \"@/components/series/data-loader\";\nimport { MetaDataTable, SeriesDataTable } from \"@/components/series/tables\";\n\nexport default async function SeriesPage({\n  params,\n}: {\n  params: { id: number };\n}) {\n  const { id } = await params;\n  const { error, data } = await getSeriesById(id);\n  if (error) throw error;\n  if (!data) notFound();\n\n  const { dataPoints, metadata, measurement, aliases, loaders } = data;\n\n  return (\n    <div className=\"grid grid-cols-12 gap-4\">\n      <div className=\"col-span-1 rounded\"></div>\n      <div className=\"col-span-7 rounded\">\n        <LoaderSection seriesId={id} loaders={loaders} />\n        <SeriesDataTable\n          data={dataPoints}\n          options={{ decimals: metadata.s_decimals }}\n        />\n      </div>\n      <div className=\"col-span-4 rounded\">\n        <MetaDataTable metadata={{ ...metadata, measurement, aliases }} />\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAEA;AACA;;;;;;AAEe,eAAe,WAAW,EACvC,MAAM,EAGP;IACC,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,oKAAa,EAAC;IAC5C,IAAI,OAAO,MAAM;IACjB,IAAI,CAAC,MAAM,IAAA,2MAAQ;IAEnB,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG;IAEhE,qBACE,wPAAC;QAAI,WAAU;;0BACb,wPAAC;gBAAI,WAAU;;;;;;0BACf,wPAAC;gBAAI,WAAU;;kCACb,wPAAC,+KAAa;wBAAC,UAAU;wBAAI,SAAS;;;;;;kCACtC,wPAAC,yKAAe;wBACd,MAAM;wBACN,SAAS;4BAAE,UAAU,SAAS,UAAU;wBAAC;;;;;;;;;;;;0BAG7C,wPAAC;gBAAI,WAAU;0BACb,cAAA,wPAAC,uKAAa;oBAAC,UAAU;wBAAE,GAAG,QAAQ;wBAAE;wBAAa;oBAAQ;;;;;;;;;;;;;;;;;AAIrE","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/lib/types.ts"],"sourcesContent":["export type ActionResult<T> =\n  | { error: null; data: T }\n  | { error: string; data: null; statusCode?: number };\n\nexport const createActionResult = {\n  success: <T>(data: T): ActionResult<T> => ({ error: null, data }),\n  error: <T>(error: string, statusCode?: number): ActionResult<T> => ({\n    error,\n    data: null,\n    statusCode,\n  }),\n};\n"],"names":[],"mappings":";;;;AAIO,MAAM,qBAAqB;IAChC,SAAS,CAAI,OAA6B,CAAC;YAAE,OAAO;YAAM;QAAK,CAAC;IAChE,OAAO,CAAI,OAAe,aAAyC,CAAC;YAClE;YACA,MAAM;YACN;QACF,CAAC;AACH","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/lib/action-utils.ts"],"sourcesContent":["\"use server\";\n\nimport { ActionResult, createActionResult } from \"./types\";\n\nexport async function withErrorHandling<T>(\n  action: () => Promise<T>\n): Promise<ActionResult<T>> {\n  try {\n    const result = await action();\n    return createActionResult.success(result);\n  } catch (error) {\n    console.error(\"Server action error:\", error);\n\n    // Can add error types more as needed\n    if (error instanceof Error) {\n      if (error.message.includes(\"404\")) {\n        return createActionResult.error(\"Resource not found\", 404);\n      }\n      if (error.message.includes(\"400\")) {\n        return createActionResult.error(error.message, 400);\n      }\n    }\n\n    return createActionResult.error(\n      \"Something went wrong. Please try again later.\"\n    );\n  }\n}\n\nexport async function apiRequest<T>(\n  endpoint: string,\n  options?: RequestInit\n): Promise<T> {\n  const response = await fetch(\n    `${process.env.API_BASE_URL || \"http://127.0.0.1:3001\"}${endpoint}`,\n    {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers,\n      },\n      ...options,\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    const error = new Error(data.error?.message || \"API request failed\");\n    error.name = `${response.status}`;\n    throw error;\n  }\n\n  return data;\n}\n"],"names":[],"mappings":";;;;;;;AAEA;;;;AAEO,eAAe,kBACpB,MAAwB;IAExB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,OAAO,yJAAkB,CAAC,OAAO,CAAC;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QAEtC,qCAAqC;QACrC,IAAI,iBAAiB,OAAO;YAC1B,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ;gBACjC,OAAO,yJAAkB,CAAC,KAAK,CAAC,sBAAsB;YACxD;YACA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ;gBACjC,OAAO,yJAAkB,CAAC,KAAK,CAAC,MAAM,OAAO,EAAE;YACjD;QACF;QAEA,OAAO,yJAAkB,CAAC,KAAK,CAC7B;IAEJ;AACF;AAEO,eAAe,WACpB,QAAgB,EAChB,OAAqB;IAErB,MAAM,WAAW,MAAM,MACrB,GAAG,QAAQ,GAAG,CAAC,YAAY,IAAI,0BAA0B,UAAU,EACnE;QACE,SAAS;YACP,gBAAgB;YAChB,GAAG,SAAS,OAAO;QACrB;QACA,GAAG,OAAO;IACZ;IAEF,MAAM,OAAO,MAAM,SAAS,IAAI;IAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,QAAQ,IAAI,MAAM,KAAK,KAAK,EAAE,WAAW;QAC/C,MAAM,IAAI,GAAG,GAAG,SAAS,MAAM,EAAE;QACjC,MAAM;IACR;IAEA,OAAO;AACT;;;IAhDsB;IAyBA;;AAzBA,yPAAA;AAyBA,yPAAA","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/actions/series-actions.ts"],"sourcesContent":["\"use server\";\n\nimport type {\n  data_points,\n  measurements,\n  series,\n  xseries,\n} from \"@prisma/client\";\nimport { apiRequest, withErrorHandling } from \"lib/action-utils\";\nimport { ActionResult } from \"lib/types\";\n\ninterface SeriesListResponse {\n  data: series[];\n  meta: {\n    offset: number;\n    limit: number;\n    count: number;\n  };\n}\n\ninterface SeriesResponse {\n  data: series;\n}\n\nexport async function getSeries(): Promise<ActionResult<series[]>> {\n  return withErrorHandling(async () => {\n    const response = await apiRequest<SeriesListResponse>(\"/series\");\n    return response.data;\n  });\n}\n\nexport async function getSeriesById(id: number): Promise<\n  ActionResult<{\n    metadata: xseries;\n    dataPoints: data_points[];\n    measurement: measurements;\n  }>\n> {\n  return withErrorHandling(async () => {\n    const response = await apiRequest<{\n      data: {\n        series: series;\n        dataPoint: data_points[];\n        measurement: measurements;\n      };\n    }>(`/series/${id}`);\n    return response.data;\n  });\n}\n\nexport async function createSeries(\n  formData: FormData\n): Promise<ActionResult<Series>> {\n  return withErrorHandling(async () => {\n    const seriesData = {\n      name: formData.get(\"name\") as string,\n      dataPortalName: formData.get(\"dataPortalName\") as string,\n      // ... other fields\n    };\n\n    const response = await apiRequest<SeriesResponse>(\"/series\", {\n      method: \"POST\",\n      body: JSON.stringify(seriesData),\n    });\n\n    return response.data;\n  });\n}\n\n// export async function getSeriesSummaries() {\n//   // SELECT `xseries`.* FROM `xseries` WHERE `xseries`.`id` = ? LIMIT ?  [[\"id\", 405962], [\"LIMIT\", 1]]\n// }\n"],"names":[],"mappings":";;;;;;;;;AAQA;;;;AAgBO,eAAe;IACpB,OAAO,IAAA,kKAAiB,EAAC;QACvB,MAAM,WAAW,MAAM,IAAA,2JAAU,EAAqB;QACtD,OAAO,SAAS,IAAI;IACtB;AACF;AAEO,eAAe,cAAc,EAAU;IAO5C,OAAO,IAAA,kKAAiB,EAAC;QACvB,MAAM,WAAW,MAAM,IAAA,2JAAU,EAM9B,CAAC,QAAQ,EAAE,IAAI;QAClB,OAAO,SAAS,IAAI;IACtB;AACF;AAEO,eAAe,aACpB,QAAkB;IAElB,OAAO,IAAA,kKAAiB,EAAC;QACvB,MAAM,aAAa;YACjB,MAAM,SAAS,GAAG,CAAC;YACnB,gBAAgB,SAAS,GAAG,CAAC;QAE/B;QAEA,MAAM,WAAW,MAAM,IAAA,2JAAU,EAAiB,WAAW;YAC3D,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,OAAO,SAAS,IAAI;IACtB;AACF,EAEA,+CAA+C;CAC/C,0GAA0G;CAC1G,IAAI;;;IA/CkB;IAOA;IAmBA;;AA1BA,yPAAA;AAOA,yPAAA;AAmBA,yPAAA","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/.next-internal/server/app/%28udaman%29/series/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getSeries as '00daf7f8e5e08116e53170ae0e1bc699ae6b1aa9ee'} from 'ACTIONS_MODULE0'\nexport {createSeries as '4054ab57a26841b7235b68e5b6ba4ca77c523100e2'} from 'ACTIONS_MODULE0'\nexport {getSeriesById as '40a253856b9a2c01be05307e447371b3d7e0c466ad'} from 'ACTIONS_MODULE0'\nexport {withErrorHandling as '407e64a257b0bea183b550c12178e1be47be27e200'} from 'ACTIONS_MODULE1'\nexport {apiRequest as '6007855f4aaf71eccf29dd5056ef7b747977cc4606'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAGA","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/shared/utils/time.ts"],"sourcesContent":["import { data_points } from \"@prisma/client\";\nimport {\n  addMonths,\n  addQuarters,\n  addYears,\n  differenceInDays,\n  format,\n  isAfter,\n  startOfMonth,\n  startOfQuarter,\n  startOfYear,\n} from \"date-fns\";\n\n/* Functions for generating date lists for use in tables, charts, etc. Initially used in CPI-RPP portal */\n\nfunction generateDates(\n  startDate: Date,\n  endDate: Date,\n  frequency: string, // \"M\" | \"Q\" | \"A\"\n  formatString?: string\n): string[] {\n  if (\n    !startDate ||\n    !endDate ||\n    isNaN(startDate.getTime()) ||\n    isNaN(endDate.getTime())\n  ) {\n    throw new Error(\"generateDates: invalid dates passed as arguments\");\n  }\n\n  if (isAfter(startDate, endDate)) {\n    throw new Error(\n      \"generateDates: startDate must be before or equal to endDate\"\n    );\n  }\n\n  switch (frequency) {\n    case \"M\":\n      return generateMonths(startDate, endDate, formatString);\n    case \"Q\":\n      return generateQuarters(startDate, endDate, formatString);\n    case \"A\":\n      return generateYears(startDate, endDate, formatString);\n    default:\n      return generateMonths(startDate, endDate, formatString);\n  }\n}\n\nfunction generateMonths(\n  startDate: Date,\n  endDate: Date,\n  formatString: string = \"yyyy-MM\"\n): string[] {\n  const months: string[] = [];\n  let current = startOfMonth(startDate);\n  const end = startOfMonth(endDate);\n\n  while (!isAfter(current, end)) {\n    months.push(format(current, formatString));\n    current = addMonths(current, 1);\n  }\n\n  return months;\n}\n\nfunction generateQuarters(\n  startDate: Date,\n  endDate: Date,\n  formatString: string = \"yyyy-'Q'Q\"\n): string[] {\n  const quarters: string[] = [];\n  let current = startOfQuarter(startDate);\n  const end = startOfQuarter(endDate);\n\n  while (!isAfter(current, end)) {\n    quarters.push(format(current, formatString));\n    current = addQuarters(current, 1);\n  }\n\n  return quarters;\n}\n\nfunction generateYears(\n  startDate: Date,\n  endDate: Date,\n  formatString: string = \"yyyy\"\n): string[] {\n  const years: string[] = [];\n  let current = startOfYear(startDate);\n  const end = startOfYear(endDate);\n\n  while (!isAfter(current, end)) {\n    years.push(format(current, formatString));\n    current = addYears(current, 1);\n  }\n\n  return years;\n}\n\n/** Try to keep display formats consistent across all systems */\nconst uheroDate = (date: Date, freq?: string) => {\n  switch (freq) {\n    case \"M\":\n      return format(date, \"MMM yyyy\");\n    case \"Q\":\n      return format(date, \"yyyy QQQ\");\n    case \"A\":\n      return format(date, \"yyyy\");\n    default:\n      return format(date, \"yyyy-MM-dd\");\n  }\n};\n\n/** Generates the age field in series table. Taken from JP's ruby version. Unsure why\n * they settled on the 100 day and 10 month intervals.\n */\nfunction dpAgeCode(updatedAt: string, pseudoHistory: boolean) {\n  console.log(\"updatedAt\", updatedAt);\n  const now = new Date();\n  const createdAt = new Date(updatedAt);\n  const days = differenceInDays(now, createdAt);\n  const months = Math.round(days / 30.0);\n\n  const prefix = pseudoHistory ? \"*\" : \"\";\n\n  let ageCode;\n  if (days < 100) {\n    ageCode = days.toString().padStart(2, \"0\");\n  } else if (months < 10) {\n    ageCode = `${months}m`;\n  } else {\n    let years = days / 365.0;\n    years = years % 1 < 0.8 ? Math.floor(years) : Math.floor(years) + 1;\n    years = years === 0 ? 1 : years;\n    ageCode = `${years}y`;\n  }\n\n  return prefix + ageCode;\n}\n\nfunction formatRuntime(runtimeSeconds: number | null): string {\n  if (runtimeSeconds === null) return \"-\";\n  return `${runtimeSeconds.toFixed(2)}s`;\n}\n\nexport { generateDates, uheroDate, dpAgeCode, formatRuntime };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/series/data-loader.tsx"],"sourcesContent":["import Link from \"next/link\";\nimport { DataLoader } from \"@shared/types/shared\";\nimport { formatRuntime } from \"@shared/utils/time\";\nimport { format } from \"date-fns\";\nimport { Clock } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport const LoaderSection = ({\n  seriesId,\n  loaders,\n}: {\n  seriesId: number;\n  loaders: DataLoader[];\n}) => {\n  const actions = [\n    { action: \"load\", url: \"#\" },\n    { action: \"clear\", url: \"#\" },\n    { action: \"delete\", url: \"#\" },\n    { action: \"disable\", url: \"#\" },\n    { action: \"edit\", url: \"#\" },\n    { action: \"toggle nightly load\", url: \"#\" },\n  ];\n  const bulkActions = [\n    { action: \"new\", url: \"#\" },\n    { action: \"clear data\", url: \"#\" },\n    { action: \"load all\", url: \"#\" },\n  ];\n  console.log(\"LoaderSection\", loaders);\n\n  return (\n    <div className=\"flex flex-col border-b\">\n      <div className=\"flex flex-row justify-start border-b font-semibold\">\n        <span className=\"mr-4\">Loaders</span>(\n        {bulkActions.map((m, i) => (\n          <div key={`bulk-action-${i}`}>\n            <Link href={m.url} className=\"px-2\">\n              {m.action}\n            </Link>\n            {i !== bulkActions.length - 1 ? \"|\" : \"\"}\n          </div>\n        ))}\n        )\n      </div>\n      {loaders.map((l, i) => (\n        <LoaderItem key={`data-loader-${i}`} loader={l} />\n      ))}\n    </div>\n  );\n};\n\nconst LoaderItem = ({ loader }: { loader: DataLoader }) => {\n  const lastRunDate =\n    loader.last_run_at !== null ? format(loader.last_run_at, \"mm/dd/yy\") : \"-\";\n  const lastRunTime =\n    loader.last_run_at !== null ? format(loader.last_run_at, \"HH:MM\") : \"-\";\n  const runtime = formatRuntime(loader.runtime);\n\n  return (\n    <div className={cn(\"p-2\", getColor(loader.color))}>\n      <div className=\"flex flex-row items-center justify-evenly\">\n        <div className=\"flex\">\n          <span className=\"text-left text-xs font-light\">{lastRunDate}</span>\n          <span className=\"text-primary/80 text-xs\">{lastRunTime}</span>\n        </div>\n        <span className=\"text-primary/80 text-sm\">({loader.priority})</span>\n        {actions.map((m, i) => (\n          <div key={`load-stmt-action-${i}`}>\n            <Link href={m.url} className=\"text-sm\">\n              {m.action}\n            </Link>\n            {i !== actions.length - 1 ? <span className=\"text-sm\">|</span> : \"\"}\n          </div>\n        ))}\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"my-3 flex py-2 font-semibold\">\n          {loader.id} <Clock className=\"ml-2 p-0.5\" />{\" \"}\n        </div>\n\n        <span className=\"w-18 text-left text-xs font-light tracking-tighter\">\n          ({runtime})\n        </span>\n        <div>\n          <span className=\"font-semibold\">Scale:</span> {loader.scale}\n        </div>\n      </div>\n\n      <div>\n        <p className=\"text-xs\">{loader.description}</p>\n        <p className=\"text-xs\">{loader.eval}</p>\n      </div>\n    </div>\n  );\n};\n\n/* Tailwind requires colors be named somewhere in the codebase in order to use so using\nthis implementation to get started, may switch to using hex codes as keys to tailwind \ncolors for better colors. */\nconst getColor = (color: string | null) => {\n  if (color === null) return \"bg-muted\";\n  const colors: Record<string, string> = {\n    // Purples\n    B2A1EA: \"bg-[#B2A1EA]\",\n    CDC8FE: \"bg-[#CDC8FE]\",\n    A885EF: \"bg-[#A885EF]\",\n    // Oranges\n    FFA94E: \"bg-[#FFA94E]\",\n    FFA500: \"bg-[#FFA500]\",\n    // blues\n    A9BEF2: \"bg-[#A9BEF2]\",\n    C3DDF9: \"bg-[#C3DDF9]\",\n    \"6495ED\": \"bg-[#6495ED]\",\n    // yellow\n    F9FF8B: \"bg-[#F9FF8B]\",\n    FBFFBD: \"bg-[#FBFFBD]\",\n    F0E67F: \"bg-[#F0E67F]\",\n    // browns\n    CAAF8C: \"bg-[#CAAF8C]\",\n    DFC3AA: \"bg-[#DFC3AA]\",\n    B78E5C: \"bg-[#B78E5C]\",\n    // salmon:\n    FEB4AA: \"bg-[#FEB4AA]\",\n    // greens:\n    \"9FDD8C\": \"bg-[#9FDD8C]\",\n    D0F0C0: \"bg-[#D0F0C0]\",\n    \"88D3B2\": \"bg-[#88D3B2]\",\n    \"74C365\": \"bg-[#74C365]\",\n  };\n  return colors[color];\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 603, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/series/tables.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const MetaDataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call MetaDataTable() from the server but MetaDataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx <module evaluation>\",\n    \"MetaDataTable\",\n);\nexport const SeriesDataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call SeriesDataTable() from the server but SeriesDataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx <module evaluation>\",\n    \"SeriesDataTable\",\n);\nexport const SeriesSummaryTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call SeriesSummaryTable() from the server but SeriesSummaryTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx <module evaluation>\",\n    \"SeriesSummaryTable\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;;;AACvE;;AACO,MAAM,gBAAgB,IAAA,kRAAuB,EAChD;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,+EACA;AAEG,MAAM,kBAAkB,IAAA,kRAAuB,EAClD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,+EACA;AAEG,MAAM,qBAAqB,IAAA,kRAAuB,EACrD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,+EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/series/tables.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const MetaDataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call MetaDataTable() from the server but MetaDataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx\",\n    \"MetaDataTable\",\n);\nexport const SeriesDataTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call SeriesDataTable() from the server but SeriesDataTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx\",\n    \"SeriesDataTable\",\n);\nexport const SeriesSummaryTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call SeriesSummaryTable() from the server but SeriesSummaryTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/udaman/dashboard/components/series/tables.tsx\",\n    \"SeriesSummaryTable\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;;;;;AACvE;;AACO,MAAM,gBAAgB,IAAA,kRAAuB,EAChD;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,2DACA;AAEG,MAAM,kBAAkB,IAAA,kRAAuB,EAClD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,2DACA;AAEG,MAAM,qBAAqB,IAAA,kRAAuB,EACrD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,2DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 651, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 659, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/app/%28udaman%29/series/%5Bid%5D/page.tsx"],"sourcesContent":["import { notFound } from \"next/navigation\";\nimport { getSeriesById } from \"@/actions/series-actions\";\n\nimport { LoaderSection } from \"@/components/series/data-loader\";\nimport { MetaDataTable, SeriesDataTable } from \"@/components/series/tables\";\n\n/* Metadata\n{\n   id: 400625,\n   xseries_id: 400625,\n   geography_id: 6378,\n   unit_id: 6477,\n   source_id: 7576,\n   source_detail_id: null,\n   universe: 'NTA',\n   decimals: 2,\n   name: 'NTA_LSR@CPV.A',\n   dataPortalName: 'Longitudinal support ratio',\n   description: null,\n   created_at: '2023-12-01T17:45:17.000Z',\n   updated_at: '2023-12-01T17:45:17.000Z',\n   dependency_depth: 0,\n   source_link: null,\n   investigation_notes: null,\n   scratch: 0,\n   primary_series_id: 405962,\n   restricted: 0,\n   quarantined: 0,\n   frequency: 'year',\n   seasonally_adjusted: null,\n   seasonal_adjustment: 'not_applicable',\n   aremos_missing: null,\n   aremos_diff: null,\n   mult: null,\n   units: 1,\n   percent: 0,\n   real: null,\n   base_year: null,\n   frequency_transform: null,\n   last_demetra_date: null,\n   last_demetra_datestring: null,\n   factor_application: null,\n   factors: null,\n   geo_handle: 'CPV',\n   geo_display_name: 'Cabo Verde',\n   unit_short: 'Percent',\n   unit_long: 'Percent',\n   source_description: 'Longitudinal support ratio (Mason, Lee et al. 2017)',\n   source_detail_description: null\n} */\n\nexport default async function SeriesPage({\n  params,\n}: {\n  params: { id: number };\n}) {\n  const { id } = await params;\n  const { error, data } = await getSeriesById(id);\n  if (error) throw error;\n  if (!data) notFound();\n\n  const { dataPoints, metadata, measurement, aliases, loaders } = data;\n  console.log(\"Data Points\", dataPoints);\n  return (\n    <div className=\"grid grid-cols-12 gap-4\">\n      <div className=\"col-span-1 rounded\"></div>\n      <div className=\"col-span-6 rounded\">\n        <div>\n          <LoaderSection seriesId={id} loaders={loaders} />\n          <SeriesDataTable data={dataPoints} />\n        </div>\n      </div>\n      <div className=\"col-span-4 rounded\">\n        <MetaDataTable metadata={{ ...metadata, measurement, aliases }} />\n      </div>\n    </div>\n  );\n}\n\n/* Metadata\n{\n   id: 400625,\n   xseries_id: 400625,\n   geography_id: 6378,\n   unit_id: 6477,\n   source_id: 7576,\n   source_detail_id: null,\n   universe: 'NTA',\n   decimals: 2,\n   name: 'NTA_LSR@CPV.A',\n   dataPortalName: 'Longitudinal support ratio',\n   description: null,\n   created_at: '2023-12-01T17:45:17.000Z',\n   updated_at: '2023-12-01T17:45:17.000Z',\n   dependency_depth: 0,\n   source_link: null,\n   investigation_notes: null,\n   scratch: 0,\n   primary_series_id: 405962,\n   restricted: 0,\n   quarantined: 0,\n   frequency: 'year',\n   seasonally_adjusted: null,\n   seasonal_adjustment: 'not_applicable',\n   aremos_missing: null,\n   aremos_diff: null,\n   mult: null,\n   units: 1,\n   percent: 0,\n   real: null,\n   base_year: null,\n   frequency_transform: null,\n   last_demetra_date: null,\n   last_demetra_datestring: null,\n   factor_application: null,\n   factors: null,\n   geo_handle: 'CPV',\n   geo_display_name: 'Cabo Verde',\n   unit_short: 'Percent',\n   unit_long: 'Percent',\n   source_description: 'Longitudinal support ratio (Mason, Lee et al. 2017)',\n   source_detail_description: null\n  \n   Data Source (loader)\n    id\n    series_id\n    disabled\n    universe\n    priority\n    created_at\n    updated_at\n    reload_nightly\n    pseudo_history\n    clear_before_load\n    eval\n    scale\n    presave_hook\n    color\n    runtime\n    last_run_at\n    last_run_in_seconds\n    last_error\n    last_error_at\n    dependencies\n    description\n} */\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AAEA;AACA;;;;;;AA+Ce,eAAe,WAAW,EACvC,MAAM,EAGP;IACC,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,oKAAa,EAAC;IAC5C,IAAI,OAAO,MAAM;IACjB,IAAI,CAAC,MAAM,IAAA,2MAAQ;IAEnB,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG;IAChE,QAAQ,GAAG,CAAC,eAAe;IAC3B,qBACE,wPAAC;QAAI,WAAU;;0BACb,wPAAC;gBAAI,WAAU;;;;;;0BACf,wPAAC;gBAAI,WAAU;0BACb,cAAA,wPAAC;;sCACC,wPAAC,+KAAa;4BAAC,UAAU;4BAAI,SAAS;;;;;;sCACtC,wPAAC,yKAAe;4BAAC,MAAM;;;;;;;;;;;;;;;;;0BAG3B,wPAAC;gBAAI,WAAU;0BACb,cAAA,wPAAC,uKAAa;oBAAC,UAAU;wBAAE,GAAG,QAAQ;wBAAE;wBAAa;oBAAQ;;;;;;;;;;;;;;;;;AAIrE,EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkEE","debugId":null}}]
}
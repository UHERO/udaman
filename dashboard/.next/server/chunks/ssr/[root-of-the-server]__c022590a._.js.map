{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/ui/table.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-semibold whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"max-w-80 truncate px-2 py-1 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAIA;AAJA;;;AAMA,SAAS,MAAM,EAAE,SAAS,EAAE,GAAG,OAAsC;IACnE,qBACE,wPAAC;QACC,aAAU;QACV,WAAU;kBAEV,cAAA,wPAAC;YACC,aAAU;YACV,WAAW,IAAA,yIAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIjB;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAsC;IACzE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EAAC,mBAAmB;QAChC,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAsC;IACvE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAsC;IACzE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,SAAS,EAAE,SAAS,EAAE,GAAG,OAAmC;IACnE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EACX,sEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAmC;IACpE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EACX,wJACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAmC;IACpE,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EACX,kIACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,aAAa,EACpB,SAAS,EACT,GAAG,OAC6B;IAChC,qBACE,wPAAC;QACC,aAAU;QACV,WAAW,IAAA,yIAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/components/series/series-summary-table.tsx"],"sourcesContent":["\"use client\";\n\nimport Link from \"next/link\";\nimport { SeriesSummary } from \"@shared/types\";\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { format } from \"date-fns\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\ninterface DataTableProps<TData> {\n  data: TData[];\n}\n\nconst saMap = {\n  not_seasonally_adjusted: \"NS\",\n  seasonally_adjusted: \"SA\",\n  not_applicable: \"NA\",\n};\n\nconst saVariant = {\n  seasonally_adjusted: \"text-green-600\",\n  not_seasonally_adjusted: \"text-orange-600\",\n  not_applicable: \"text-primary\",\n};\n\nexport function SeriesSummaryTable<TData>({ data }: DataTableProps<TData>) {\n  const columns: ColumnDef<SeriesSummary>[] = [\n    {\n      accessorKey: \"name\",\n      header: () => (\n        <>\n          <span>Name</span>{\" \"}\n          <span className=\"text-xs no-underline opacity-70\">name@geo.freq</span>\n        </>\n      ),\n    },\n    {\n      accessorKey: \"seasonalAdjustment\",\n      header: \"SA\",\n      cell: ({ row }) => {\n        const sa = row.getValue(\"seasonalAdjustment\");\n        return <span className={cn(saVariant[sa])}>{saMap[sa]}</span>;\n      },\n    },\n    {\n      accessorKey: \"portalName\",\n      header: \"Portal Name\",\n    },\n    {\n      accessorKey: \"unitShortLabel\",\n      header: \"Units\",\n    },\n    {\n      accessorKey: \"minDate\",\n      header: \"First\",\n      cell: ({ row }) => {\n        const date = row.getValue(\"minDate\");\n        return format(date, \"yyyy-MM-dd\");\n      },\n    },\n    {\n      accessorKey: \"maxDate\",\n      header: \"Last\",\n      cell: ({ row }) => {\n        const date = row.getValue(\"maxDate\");\n        return format(date, \"yyyy-MM-dd\");\n      },\n    },\n    {\n      accessorKey: \"sourceDescription\",\n      header: \"Source\",\n      cell: ({ row }) => (\n        <div className=\"max-w-48 truncate\">\n          <Link href=\"#\" className=\"hover:font-medium hover:underline\">\n            {row.getValue(\"sourceDescription\")}\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  });\n\n  return (\n    <div className=\"overflow-hidden rounded-md bg-white\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                );\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row, i) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && \"selected\"}\n                className={i % 2 === 0 ? \"bg-muted\" : \"bg-none\"}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AAEA;AAAA;AAMA;AAEA;AACA;AAbA;;;;;;;AA0BA,MAAM,QAAQ;IACZ,yBAAyB;IACzB,qBAAqB;IACrB,gBAAgB;AAClB;AAEA,MAAM,YAAY;IAChB,qBAAqB;IACrB,yBAAyB;IACzB,gBAAgB;AAClB;AAEO,SAAS,mBAA0B,EAAE,IAAI,EAAyB;IACvE,MAAM,UAAsC;QAC1C;YACE,aAAa;YACb,QAAQ,kBACN;;sCACE,wPAAC;sCAAK;;;;;;wBAAY;sCAClB,wPAAC;4BAAK,WAAU;sCAAkC;;;;;;;;QAGxD;QACA;YACE,aAAa;YACb,QAAQ;YACR,MAAM,CAAC,EAAE,GAAG,EAAE;gBACZ,MAAM,KAAK,IAAI,QAAQ,CAAC;gBACxB,qBAAO,wPAAC;oBAAK,WAAW,IAAA,yIAAE,EAAC,SAAS,CAAC,GAAG;8BAAI,KAAK,CAAC,GAAG;;;;;;YACvD;QACF;QACA;YACE,aAAa;YACb,QAAQ;QACV;QACA;YACE,aAAa;YACb,QAAQ;QACV;QACA;YACE,aAAa;YACb,QAAQ;YACR,MAAM,CAAC,EAAE,GAAG,EAAE;gBACZ,MAAM,OAAO,IAAI,QAAQ,CAAC;gBAC1B,OAAO,IAAA,yKAAM,EAAC,MAAM;YACtB;QACF;QACA;YACE,aAAa;YACb,QAAQ;YACR,MAAM,CAAC,EAAE,GAAG,EAAE;gBACZ,MAAM,OAAO,IAAI,QAAQ,CAAC;gBAC1B,OAAO,IAAA,yKAAM,EAAC,MAAM;YACtB;QACF;QACA;YACE,aAAa;YACb,QAAQ;YACR,MAAM,CAAC,EAAE,GAAG,EAAE,iBACZ,wPAAC;oBAAI,WAAU;8BACb,cAAA,wPAAC,iLAAI;wBAAC,MAAK;wBAAI,WAAU;kCACtB,IAAI,QAAQ,CAAC;;;;;;;;;;;QAItB;KACD;IAED,MAAM,QAAQ,IAAA,iNAAa,EAAC;QAC1B;QACA;QACA,iBAAiB,IAAA,kMAAe;IAClC;IAEA,qBACE,wPAAC;QAAI,WAAU;kBACb,cAAA,wPAAC,0JAAK;;8BACJ,wPAAC,gKAAW;8BACT,MAAM,eAAe,GAAG,GAAG,CAAC,CAAC,4BAC5B,wPAAC,6JAAQ;sCACN,YAAY,OAAO,CAAC,GAAG,CAAC,CAAC;gCACxB,qBACE,wPAAC,8JAAS;8CACP,OAAO,aAAa,GACjB,OACA,IAAA,8MAAU,EACR,OAAO,MAAM,CAAC,SAAS,CAAC,MAAM,EAC9B,OAAO,UAAU;mCALT,OAAO,EAAE;;;;;4BAS7B;2BAZa,YAAY,EAAE;;;;;;;;;;8BAgBjC,wPAAC,8JAAS;8BACP,MAAM,WAAW,GAAG,IAAI,EAAE,SACzB,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,kBACjC,wPAAC,6JAAQ;4BAEP,cAAY,IAAI,aAAa,MAAM;4BACnC,WAAW,IAAI,MAAM,IAAI,aAAa;sCAErC,IAAI,eAAe,GAAG,GAAG,CAAC,CAAC,qBAC1B,wPAAC,8JAAS;8CACP,IAAA,8MAAU,EAAC,KAAK,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,UAAU;mCADzC,KAAK,EAAE;;;;;2BALpB,IAAI,EAAE;;;;kDAYf,wPAAC,6JAAQ;kCACP,cAAA,wPAAC,8JAAS;4BAAC,SAAS,QAAQ,MAAM;4BAAE,WAAU;sCAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAS/E","debugId":null}}]
}
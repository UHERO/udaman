{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/lib/types.ts"],"sourcesContent":["export type ActionResult<T> =\n  | { error: null; data: T }\n  | { error: string; data: null; statusCode?: number };\n\nexport const createActionResult = {\n  success: <T>(data: T): ActionResult<T> => ({ error: null, data }),\n  error: <T>(error: string, statusCode?: number): ActionResult<T> => ({\n    error,\n    data: null,\n    statusCode,\n  }),\n};\n"],"names":[],"mappings":";;;;AAIO,MAAM,qBAAqB;IAChC,SAAS,CAAI,OAA6B,CAAC;YAAE,OAAO;YAAM;QAAK,CAAC;IAChE,OAAO,CAAI,OAAe,aAAyC,CAAC;YAClE;YACA,MAAM;YACN;QACF,CAAC;AACH","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/lib/action-utils.ts"],"sourcesContent":["\"use server\";\n\nimport { ActionResult, createActionResult } from \"./types\";\n\nexport async function withErrorHandling<T>(\n  action: () => Promise<T>\n): Promise<ActionResult<T>> {\n  try {\n    const result = await action();\n    return createActionResult.success(result);\n  } catch (error) {\n    console.error(\"Server action error:\", error);\n\n    // Can add error types more as needed\n    if (error instanceof Error) {\n      if (error.message.includes(\"404\")) {\n        return createActionResult.error(\"Resource not found\", 404);\n      }\n      if (error.message.includes(\"400\")) {\n        return createActionResult.error(error.message, 400);\n      }\n    }\n\n    return createActionResult.error(\n      \"Something went wrong. Please try again later.\"\n    );\n  }\n}\n\nexport async function apiRequest<T>(\n  endpoint: string,\n  options?: RequestInit\n): Promise<T> {\n  const response = await fetch(\n    `${process.env.API_BASE_URL || \"http://127.0.0.1:3001\"}${endpoint}`,\n    {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers,\n      },\n      ...options,\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    const error = new Error(data.error?.message || \"API request failed\");\n    error.name = `${response.status}`;\n    throw error;\n  }\n\n  return data;\n}\n"],"names":[],"mappings":";;;;;;;AAEA;;;;AAEO,eAAe,kBACpB,MAAwB;IAExB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,OAAO,yJAAkB,CAAC,OAAO,CAAC;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QAEtC,qCAAqC;QACrC,IAAI,iBAAiB,OAAO;YAC1B,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ;gBACjC,OAAO,yJAAkB,CAAC,KAAK,CAAC,sBAAsB;YACxD;YACA,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,QAAQ;gBACjC,OAAO,yJAAkB,CAAC,KAAK,CAAC,MAAM,OAAO,EAAE;YACjD;QACF;QAEA,OAAO,yJAAkB,CAAC,KAAK,CAC7B;IAEJ;AACF;AAEO,eAAe,WACpB,QAAgB,EAChB,OAAqB;IAErB,MAAM,WAAW,MAAM,MACrB,GAAG,QAAQ,GAAG,CAAC,YAAY,IAAI,0BAA0B,UAAU,EACnE;QACE,SAAS;YACP,gBAAgB;YAChB,GAAG,SAAS,OAAO;QACrB;QACA,GAAG,OAAO;IACZ;IAEF,MAAM,OAAO,MAAM,SAAS,IAAI;IAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,QAAQ,IAAI,MAAM,KAAK,KAAK,EAAE,WAAW;QAC/C,MAAM,IAAI,GAAG,GAAG,SAAS,MAAM,EAAE;QACjC,MAAM;IACR;IAEA,OAAO;AACT;;;IAhDsB;IAyBA;;AAzBA,yPAAA;AAyBA,yPAAA","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/actions/series-actions.ts"],"sourcesContent":["\"use server\";\n\nimport type {\n  data_points,\n  measurements,\n  series,\n  xseries,\n} from \"@prisma/client\";\nimport { apiRequest, withErrorHandling } from \"lib/action-utils\";\nimport { ActionResult } from \"lib/types\";\n\ninterface SeriesListResponse {\n  data: series[];\n  meta: {\n    offset: number;\n    limit: number;\n    count: number;\n  };\n}\n\ninterface SeriesResponse {\n  data: series;\n}\n\nexport async function getseries(): Promise<ActionResult<Series[]>> {\n  return withErrorHandling(async () => {\n    const response = await apiRequest<SeriesListResponse>(\"/series\");\n    return response.data;\n  });\n}\n\nexport async function getSeriesById(id: number): Promise<\n  ActionResult<{\n    metadata: xseries;\n    dataPoints: data_points[];\n    measurement: measurements;\n  }>\n> {\n  return withErrorHandling(async () => {\n    const response = await apiRequest<{\n      data: {\n        series: series;\n        dataPoint: data_points[];\n        measurement: measurements;\n      };\n    }>(`/series/${id}`);\n    return response.data;\n  });\n}\n\nexport async function createSeries(\n  formData: FormData\n): Promise<ActionResult<Series>> {\n  return withErrorHandling(async () => {\n    const seriesData = {\n      name: formData.get(\"name\") as string,\n      dataPortalName: formData.get(\"dataPortalName\") as string,\n      // ... other fields\n    };\n\n    const response = await apiRequest<SeriesResponse>(\"/series\", {\n      method: \"POST\",\n      body: JSON.stringify(seriesData),\n    });\n\n    return response.data;\n  });\n}\n\n// export async function getSeriesSummaries() {\n//   // SELECT `xseries`.* FROM `xseries` WHERE `xseries`.`id` = ? LIMIT ?  [[\"id\", 405962], [\"LIMIT\", 1]]\n// }\n"],"names":[],"mappings":";;;;;;;;;AAQA;;;;AAgBO,eAAe;IACpB,OAAO,IAAA,kKAAiB,EAAC;QACvB,MAAM,WAAW,MAAM,IAAA,2JAAU,EAAqB;QACtD,OAAO,SAAS,IAAI;IACtB;AACF;AAEO,eAAe,cAAc,EAAU;IAO5C,OAAO,IAAA,kKAAiB,EAAC;QACvB,MAAM,WAAW,MAAM,IAAA,2JAAU,EAM9B,CAAC,QAAQ,EAAE,IAAI;QAClB,OAAO,SAAS,IAAI;IACtB;AACF;AAEO,eAAe,aACpB,QAAkB;IAElB,OAAO,IAAA,kKAAiB,EAAC;QACvB,MAAM,aAAa;YACjB,MAAM,SAAS,GAAG,CAAC;YACnB,gBAAgB,SAAS,GAAG,CAAC;QAE/B;QAEA,MAAM,WAAW,MAAM,IAAA,2JAAU,EAAiB,WAAW;YAC3D,QAAQ;YACR,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,OAAO,SAAS,IAAI;IACtB;AACF,EAEA,+CAA+C;CAC/C,0GAA0G;CAC1G,IAAI;;;IA/CkB;IAOA;IAmBA;;AA1BA,yPAAA;AAOA,yPAAA;AAmBA,yPAAA","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/.next-internal/server/app/%28udaman%29/series/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getseries as '00d603e9a7f83c0e3942243b712424f2ab377fbc55'} from 'ACTIONS_MODULE0'\nexport {createSeries as '4054ab57a26841b7235b68e5b6ba4ca77c523100e2'} from 'ACTIONS_MODULE0'\nexport {getSeriesById as '40a253856b9a2c01be05307e447371b3d7e0c466ad'} from 'ACTIONS_MODULE0'\nexport {withErrorHandling as '407e64a257b0bea183b550c12178e1be47be27e200'} from 'ACTIONS_MODULE1'\nexport {apiRequest as '6007855f4aaf71eccf29dd5056ef7b747977cc4606'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAGA","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///Users/calebwood/Developer/udaman/dashboard/app/%28udaman%29/series/%5Bid%5D/page.tsx"],"sourcesContent":["import { notFound } from \"next/navigation\";\nimport { getSeriesById } from \"@/actions/series-actions\";\n\n/* Metadata\n{\n   id: 400625,\n   xseries_id: 400625,\n   geography_id: 6378,\n   unit_id: 6477,\n   source_id: 7576,\n   source_detail_id: null,\n   universe: 'NTA',\n   decimals: 2,\n   name: 'NTA_LSR@CPV.A',\n   dataPortalName: 'Longitudinal support ratio',\n   description: null,\n   created_at: '2023-12-01T17:45:17.000Z',\n   updated_at: '2023-12-01T17:45:17.000Z',\n   dependency_depth: 0,\n   source_link: null,\n   investigation_notes: null,\n   scratch: 0,\n   primary_series_id: 405962,\n   restricted: 0,\n   quarantined: 0,\n   frequency: 'year',\n   seasonally_adjusted: null,\n   seasonal_adjustment: 'not_applicable',\n   aremos_missing: null,\n   aremos_diff: null,\n   mult: null,\n   units: 1,\n   percent: 0,\n   real: null,\n   base_year: null,\n   frequency_transform: null,\n   last_demetra_date: null,\n   last_demetra_datestring: null,\n   factor_application: null,\n   factors: null,\n   geo_handle: 'CPV',\n   geo_display_name: 'Cabo Verde',\n   unit_short: 'Percent',\n   unit_long: 'Percent',\n   source_description: 'Longitudinal support ratio (Mason, Lee et al. 2017)',\n   source_detail_description: null\n} */\n\nexport default async function SeriesPage({\n  params,\n}: {\n  params: { id: number };\n}) {\n  const { id } = await params;\n  const { error, data } = await getSeriesById(id);\n  if (error) throw error;\n  if (!data) notFound();\n\n  const { dataPoints, metadata, measurement } = data;\n  return (\n    <div className=\"grid grid-cols-12 gap-4\">\n      <div className=\"bg-muted col-span-3 rounded border\">\n        <h2 className=\"text-4xl\">MetaData</h2>\n        {/* <div>\n          {Object.entries(metadata).map(([key, val], i) => (\n            <p key={i}>\n              <span>{key}:</span>\n              <span>{JSON.stringify(val)}</span>\n            </p>\n          ))}\n        </div> */}\n        {/* <h2 className=\"text-4xl\">Measurement</h2>\n        <div>\n          {Object.entries(measurement).map(([key, val], i) => (\n            <p key={i}>\n              <span>{key}:</span>\n              <span>{JSON.stringify(val)}</span>\n            </p>\n          ))}\n        </div> */}\n      </div>\n      <div className=\"bg-muted col-span-6 rounded border\">\n        {\" \"}\n        <h2 className=\"text-4xl\">Data Points</h2>\n        <div>\n          {dataPoints.map((dp) =>\n            Object.entries(dp).map(([key, val], i) => (\n              <p key={i}>\n                <span>{key}:</span>\n                <span>{JSON.stringify(val)}</span>\n              </p>\n            ))\n          )}\n        </div>\n      </div>\n      <div className=\"bg-muted col-span-3 rounded border\"></div>\n    </div>\n  );\n}\n\n/* Metadata\n{\n   id: 400625,\n   xseries_id: 400625,\n   geography_id: 6378,\n   unit_id: 6477,\n   source_id: 7576,\n   source_detail_id: null,\n   universe: 'NTA',\n   decimals: 2,\n   name: 'NTA_LSR@CPV.A',\n   dataPortalName: 'Longitudinal support ratio',\n   description: null,\n   created_at: '2023-12-01T17:45:17.000Z',\n   updated_at: '2023-12-01T17:45:17.000Z',\n   dependency_depth: 0,\n   source_link: null,\n   investigation_notes: null,\n   scratch: 0,\n   primary_series_id: 405962,\n   restricted: 0,\n   quarantined: 0,\n   frequency: 'year',\n   seasonally_adjusted: null,\n   seasonal_adjustment: 'not_applicable',\n   aremos_missing: null,\n   aremos_diff: null,\n   mult: null,\n   units: 1,\n   percent: 0,\n   real: null,\n   base_year: null,\n   frequency_transform: null,\n   last_demetra_date: null,\n   last_demetra_datestring: null,\n   factor_application: null,\n   factors: null,\n   geo_handle: 'CPV',\n   geo_display_name: 'Cabo Verde',\n   unit_short: 'Percent',\n   unit_long: 'Percent',\n   source_description: 'Longitudinal support ratio (Mason, Lee et al. 2017)',\n   source_detail_description: null\n} */\n\nconst MetaDataTable = () => {\n  return <div></div>;\n};\nconst LoaderSection = () => {\n  return <div></div>;\n};\nconst SeriesDataTable = () => {\n  return <div></div>;\n};\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;;;;AA+Ce,eAAe,WAAW,EACvC,MAAM,EAGP;IACC,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,oKAAa,EAAC;IAC5C,IAAI,OAAO,MAAM;IACjB,IAAI,CAAC,MAAM,IAAA,2MAAQ;IAEnB,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG;IAC9C,qBACE,wPAAC;QAAI,WAAU;;0BACb,wPAAC;gBAAI,WAAU;0BACb,cAAA,wPAAC;oBAAG,WAAU;8BAAW;;;;;;;;;;;0BAmB3B,wPAAC;gBAAI,WAAU;;oBACZ;kCACD,wPAAC;wBAAG,WAAU;kCAAW;;;;;;kCACzB,wPAAC;kCACE,WAAW,GAAG,CAAC,CAAC,KACf,OAAO,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,kBAClC,wPAAC;;sDACC,wPAAC;;gDAAM;gDAAI;;;;;;;sDACX,wPAAC;sDAAM,KAAK,SAAS,CAAC;;;;;;;mCAFhB;;;;;;;;;;;;;;;;0BAQhB,wPAAC;gBAAI,WAAU;;;;;;;;;;;;AAGrB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2CE,GAEF,MAAM,gBAAgB;IACpB,qBAAO,wPAAC;;;;;AACV;AACA,MAAM,gBAAgB;IACpB,qBAAO,wPAAC;;;;;AACV;AACA,MAAM,kBAAkB;IACtB,qBAAO,wPAAC;;;;;AACV","debugId":null}}]
}